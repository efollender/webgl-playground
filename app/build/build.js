(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

let animation,
    helpers = [],
    mixers = [],
    pushed = false;
let clock = new THREE.Clock();
let ready = false;
let reducing = false;
let isFrameStepping = false;
let timeToStep = 0;

class Demo {
	constructor() {
		this.ms_Canvas = null;
		this.ms_Renderer = null;
		this.ms_Camera = null;
		this.ms_Scene = null;
		this.ms_Controls = null;
		this.ms_Water = null;
		this.ms_Terrain = null;
		this.ms_Raycaster = null;
		this.ms_Clickable = [];
		this.ms_Parameters = null;
		this.ms_particleSystem = null;
	}
	enable() {
		try {
			var aCanvas = document.createElement('canvas');
			return !!window.WebGLRenderingContext && (aCanvas.getContext('webgl') || aCanvas.getContext('experimental-webgl'));
		} catch (e) {
			return false;
		}
	}
	initialize(inIdCanvas, inParameters) {
		this.ms_Canvas = $('#' + inIdCanvas);
		this.ms_Parameters = inParameters;
		// Initialize Renderer, Camera, Projector and Scene
		this.ms_Renderer = this.enable ? new THREE.WebGLRenderer({ antialias: true }) : new THREE.CanvasRenderer();
		this.ms_Canvas.html(this.ms_Renderer.domElement);
		this.ms_Scene = new THREE.Scene();
		this.ms_Camera = new THREE.PerspectiveCamera(45.0, WINDOW.ms_Width / WINDOW.ms_Height, 0.5, 3000000);
		this.ms_Camera.position.set(.2, -Math.max(inParameters.width * 1.5, inParameters.height) / 8, inParameters.height);
		this.ms_Camera.lookAt(new THREE.Vector3(0, 0, 0));

		this.ms_Raycaster = new THREE.Raycaster();

		// Initialize Orbit control		
		this.ms_Controls = new THREE.OrbitControls(this.ms_Camera, this.ms_Renderer.domElement);
		this.ms_Controls.userPan = false;
		this.ms_Controls.userPanSpeed = 0.0;
		this.ms_Controls.maxDistance = 4000.0;
		this.ms_Controls.enableKeys = false;
		this.ms_Controls.maxPolarAngle = Math.PI * .495;
		this.ms_Controls.minPolarAngle = .5;
		this.ms_Controls.maxAzimuthAngle = 1;
		this.ms_Controls.minAzimuthAngle = -1;

		// Add light

		var ambient = new THREE.AmbientLight(0x888888);
		this.ms_Scene.add(ambient);
		//Left Light
		var directionalLight = new THREE.DirectionalLight(0x888888, .9);
		directionalLight.position.set(-600, 300, 600);
		this.ms_Scene.add(directionalLight);
		//Right light
		var directionalLight2 = new THREE.DirectionalLight(0x888888, .8);
		directionalLight2.position.set(600, 800, 600);
		this.ms_Scene.add(directionalLight2);
		//Bottom Light
		var directionalLight3 = new THREE.DirectionalLight(0x888888, .15);
		directionalLight3.position.set(0, 0, 1000);
		this.ms_Scene.add(directionalLight3);
		//Back Light
		var directionalLight4 = new THREE.DirectionalLight(0x77D0FF, .5);
		directionalLight4.position.set(0, 600, -600);
		this.ms_Scene.add(directionalLight4);

		// Create terrain
		this.loadTerrain(inParameters);

		// Load textures		
		var waterNormals = new THREE.ImageUtils.loadTexture('../assets/img/waternormals.jpg');
		waterNormals.wrapS = waterNormals.wrapT = THREE.SphericalReflectionMapping;

		// Create the water effect
		this.ms_Water = new THREE.Water(this.ms_Renderer, this.ms_Camera, this.ms_Scene, {
			textureWidth: 512,
			textureHeight: 512,
			waterNormals: waterNormals,
			alpha: 1.0,
			sunDirection: directionalLight.position.normalize(),
			sunColor: 0xFFFFFF,
			waterColor: 0x8F81A1,
			distortionScale: 20.0
		});
		var aMeshMirror = new THREE.Mesh(new THREE.PlaneBufferGeometry(inParameters.width * 500, inParameters.height * 500, 10, 10), this.ms_Water.material);
		aMeshMirror.add(this.ms_Water);
		aMeshMirror.rotation.x = -Math.PI * 0.5;
		this.ms_Scene.add(aMeshMirror);

		//Load objects	
		this.loadSkyBox();
		this.loadGlaciers(1, 1000, 200, .1);
		this.loadGlaciers(2, 900, -1000, .2);
		this.loadGlaciers(2, 1500, -3000, .3);
		for (var x = 3; x > 0; x--) {
			this.loadIce(x, 1000, 0, 1);
			this.loadIce(x, 400, x * 200, x);
			this.loadIce(x, 2000, x * 600, 1);
			this.loadIce(x, 2000, x * -700, 1);
			this.loadIce(x, 800, x * -800, 1.4);
		}
		this.loadCat();
		// this.loadSnow(inParameters);

		//Listen for trigger
		const mountains = document.getElementById('mountains');
		const paw = document.getElementById('paw');
		paw.addEventListener('click', () => {
			this.handleButton();
		});
		mountains.addEventListener('click', () => {
			this.ms_Terrain.callback();
		});
		this.handleKeyDown();

		//Audio
		var audio = document.createElement('audio');
		var source = document.createElement('source');
		source.src = 'assets/sounds/sleep.mp3';
		audio.loop = true;
		audio.appendChild(source);
		// audio.play();

		//allow zoom
		setTimeout(() => {
			ready = true;
		}, 7500);
	}
	loadSkyBox() {
		let skyTexture = THREE.ImageUtils.loadTexture('assets/img/gradient_03.jpg');
		skyTexture.wrapS = skyTexture.wrapT = THREE.RepeatWrapping;
		skyTexture.repeat.set(3, 3);
		skyTexture.format = THREE.RGBFormat;

		let aShader = THREE.ShaderLib['phong'];
		aShader.uniforms['map'].value = skyTexture;

		// var aSkyBoxMaterial = new THREE.ShaderMaterial({
		// fragmentShader: aShader.fragmentShader,
		// vertexShader: aShader.vertexShader,
		// uniforms: aShader.uniforms,
		//   depthWrite: false,
		//   side: THREE.BackSide
		// });

		var aSkybox = new THREE.Mesh(new THREE.SphereGeometry(10000, 32, 32), new THREE.MeshPhongMaterial({
			map: skyTexture,
			side: THREE.BackSide,
			vertexColors: THREE.FaceColors,
			shading: THREE.SmoothShading
		}));

		this.ms_Scene.add(aSkybox);
	}
	loadTerrain(inParameters) {
		var terrainGeo = TERRAINGEN.Get(inParameters);
		var iceTexture = THREE.ImageUtils.loadTexture('assets/img/texture_001.jpg');
		var terrainMaterial = new THREE.MeshPhongMaterial({
			map: iceTexture,
			shading: THREE.FlatShading,
			side: THREE.DoubleSide,
			color: new THREE.Color(0xCCCCEE)
		});
		this.ms_Terrain = new THREE.Mesh(terrainGeo, terrainMaterial);
		this.ms_Terrain.position.y = -inParameters.depth;
		this.ms_Terrain.position.z = -4000;
		this.ms_Terrain.callback = () => {
			// console.log(this.ms_Terrain.position.y);
			if (this.ms_Terrain.position.y <= -inParameters.depth) {
				reducing = false;
				this.ms_Scene.remove(this.ms_Terrain);
				this.loadTerrain(inParameters);
			} else {
				reducing = true;
			}
		};
		// this.ms_Clickable.push(this.ms_Terrain);
		this.ms_Scene.add(this.ms_Terrain);
	}
	loadGlaciers(index, z, x, scale) {
		var objLoader = new THREE.OBJLoader();
		var ms_Scene = this.ms_Scene;
		var iceTexture = THREE.ImageUtils.loadTexture('assets/img/texture_001.jpg');
		objLoader.load(`assets/landscape_assets/glacier_0${ index }.obj`, function (glacier) {
			console.log('glacier', glacier);
			//load ice texture
			for (var i = 0; i < glacier.children.length; i++) {
				// glacier.children[i].geometry.computeFaceNormals();
				// glacier.children[i].geometry.computeVertexNormals();
				glacier.children[i].material = new THREE.MeshPhongMaterial({
					map: iceTexture,
					shading: THREE.FlatShading,
					color: new THREE.Color(0xCCCCEE),
					side: THREE.DoubleSide
				});
			}
			glacier.position.z = z;
			glacier.position.x = x;
			glacier.scale.set(scale, scale, scale);
			ms_Scene.add(glacier);
		});
	}
	loadIce(index, z, x, scale) {
		const objLoader = new THREE.OBJLoader();
		const ms_Scene = this.ms_Scene;
		const iceTexture = THREE.ImageUtils.loadTexture('assets/img/texture_001.jpg');
		objLoader.load(`assets/landscape_assets/floe_0${ index }.obj`, glacier => {
			//load ice texture
			for (var i = 0; i < glacier.children.length; i++) {
				glacier.children[i].geometry.computeFaceNormals();
				glacier.children[i].geometry.computeVertexNormals();
				glacier.children[i].material = new THREE.MeshPhongMaterial({
					map: iceTexture,
					shading: THREE.FlatShading,
					color: new THREE.Color(0xCCCCEE)
				});
			}
			glacier.position.z = z;
			glacier.position.x = x;
			glacier.receiveShadow = true;
			glacier.scale.set(scale, 8, scale);
			ms_Scene.add(glacier);
		});
	}
	loadSnow(inParameters) {
		const rand = v => {
			return v * (Math.random() - 0.5);
		};
		const texture = THREE.TextureLoader('assets/img/snowflake.png');
		let numParticles = 100000;
		let width = inParameters.width;
		let height = inParameters.height / 3;
		let depth = 10000;
		let parameters = {
			color: 0xFFFFFF,
			height: 80000,
			radiusX: 10,
			radiusZ: 10,
			size: 100,
			scale: 1.0,
			opacity: 0.8,
			speedH: .1,
			speedV: .1
		};
		let systemGeometry = new THREE.Geometry();
		let systemMaterial = new THREE.ShaderMaterial({
			uniforms: {
				color: { type: 'c', value: new THREE.Color(parameters.color) },
				height: { type: 'f', value: parameters.height },
				elapsedTime: { type: 'f', value: 0 },
				radiusX: { type: 'f', value: parameters.radiusX },
				radiusZ: { type: 'f', value: parameters.radiusZ },
				size: { type: 'f', value: parameters.size },
				scale: { type: 'f', value: parameters.scale },
				texture: { type: 't', value: texture },
				opacity: { type: 'f', value: parameters.opacity },
				speedH: { type: 'f', value: parameters.speedH },
				speedV: { type: 'f', value: parameters.speedV }
			},
			vertexShader: document.getElementById('step07_vs').textContent,
			fragmentShader: document.getElementById('step09_fs').textContent,
			blending: THREE.AdditiveBlending,
			transparent: true,
			depthTest: false
		});

		for (var i = 0; i < numParticles; i++) {
			var vertex = new THREE.Vector3(rand(width), Math.random() * height, rand(depth));

			systemGeometry.vertices.push(vertex);
		}

		this.ms_particleSystem = new THREE.Points(systemGeometry, systemMaterial);
		this.ms_particleSystem.position.y = -height / 2;
		this.ms_Scene.add(this.ms_particleSystem);
	}
	loadCat() {
		const jsonLoader = new THREE.JSONLoader();
		jsonLoader.load("assets/js/cat_animated.js", (geometry, materials) => {
			this.loadAnimation(geometry, materials, 0, 30, 1000, 15, this.ms_Scene, "assets/img/cat_diffuse.jpg");
		});
		jsonLoader.load("assets/js/cat_animated_hat.js", (geometry, materials) => {
			this.loadAnimation(geometry, materials, 0, 30, 1000, 15, this.ms_Scene, "assets/img/hat_diffuse.jpg");
		});
	}
	loadAnimation(geometry, materials, x, y, z, s, scene, texture) {
		let mixer;
		const objTexture = THREE.ImageUtils.loadTexture(texture);
		geometry.computeFaceNormals();
		// geometry.computeVertexNormals();
		geometry.dynamic = true;
		geometry.__dirtyVertices = true;
		geometry.__dirtyNormals = true;

		//Flip normals
		for (var i = 0; i < geometry.faces.length; i++) {
			geometry.faces[i].normal.x = -1 * geometry.faces[i].normal.x;
			geometry.faces[i].normal.y = -1 * geometry.faces[i].normal.y;
			geometry.faces[i].normal.z = -1 * geometry.faces[i].normal.z;
		}

		for (let i = 0; i < materials.length; i++) {
			let m = materials[i];
			m.skinning = true;
			m.shading = THREE.FlatShading;
			m.shininess = 100;
			m.map = objTexture;
			m.color = new THREE.Color(0xdddddd);
			m.vertexColors = THREE.FaceColors;
		}

		let cat_mesh = new THREE.SkinnedMesh(geometry, materials[0]);
		// cat_mesh.rotation.x = Math.PI * -.5;
		cat_mesh.position.set(x, y, z);
		cat_mesh.scale.set(s, s, s);
		cat_mesh.castShadow = true;
		cat_mesh.receiveShadow = true;
		scene.add(cat_mesh);

		let clipBones = geometry.animations[0];
		let boneAction = new THREE.AnimationAction(clipBones);
		boneAction.loop = THREE.LoopOnce;
		boneAction.loopCount = 1;
		boneAction.actionTime = 2;
		mixer = new THREE.AnimationMixer(cat_mesh);
		mixer.addAction(boneAction);
		mixers.push(mixer);
	}
	display() {
		this.ms_Water.render();
		this.ms_Renderer.render(this.ms_Scene, this.ms_Camera);
	}
	initialZoom() {
		let fov = this.ms_Camera.fov;
		let zoom = this.ms_Camera.zoom;
		const inc = 0.01;
		if (zoom < 2) {
			this.ms_Camera.zoom += inc;
			this.ms_Camera.updateProjectionMatrix();
		} else {
			ready = false;
		}
	}
	update() {
		const inParameters = this.ms_Parameters;
		this.ms_Water.material.uniforms.time.value += 1.0 / 60.0;

		if (reducing) {
			this.ms_Terrain.position.y -= 20;
			this.ms_Terrain.callback();
		}
		if (this.ms_Terrain.position.y < -inParameters.depth * 0.5 && !reducing) {
			this.ms_Terrain.position.y += 20;
		}
		let delta = clock.getDelta();
		let elapsedTime = clock.getElapsedTime();

		if (this.ms_particleSystem) {
			this.ms_particleSystem.material.uniforms.elapsedTime.value = elapsedTime * 10;
		}

		if (mixers.length) {
			for (var i = 0; i < mixers.length; i++) {
				mixers[i].update(delta);
			}
		}
		if (ready) this.initialZoom();
		this.ms_Controls.update();
		this.display();
	}
	handleButton() {
		pushed = true;
		for (var i = 0; i < mixers.length; i++) {
			for (var y = 0; y < mixers[i].actions.length; y++) {
				mixers[i].actions[y].enabled = true;
				mixers[i].actions[y].loopCount = 0;
				mixers[i].actions[y].loop = THREE.LoopOnce;
				mixers[i].actions[y].actionTime = 0;
			}
		}
	}
	handleKeyDown() {
		document.addEventListener('keydown', e => {
			switch (e.keyCode) {
				case 69:
					this.ms_Terrain.callback();
					break;
				case 87:
				case 81:
					this.handleButton();
					break;
				default:
					break;
			}
		});
	}
	resize(inWidth, inHeight) {
		this.ms_Camera.aspect = inWidth / inHeight;
		this.ms_Camera.updateProjectionMatrix();
		this.ms_Renderer.setSize(inWidth, inHeight);
		this.ms_Canvas.html(this.ms_Renderer.domElement);
		this.display();
	}
};

const DEMO = new Demo();

function mainLoop() {
	requestAnimationFrame(mainLoop);
	DEMO.update();
}

function onDocumentMouseDown(event) {
	event.preventDefault();
	var mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);

	DEMO.ms_Raycaster.setFromCamera(mouse, DEMO.ms_Camera);
	var intersects = DEMO.ms_Raycaster.intersectObjects(DEMO.ms_Clickable);

	if (intersects.length > 0) {
		intersects[0].object.callback();
	}
}

$(function () {
	WINDOW.initialize();

	document.addEventListener('click', onDocumentMouseDown, false);

	var parameters = {
		alea: RAND_MT,
		generator: PN_GENERATOR,
		width: 20000,
		height: 14000,
		widthSegments: 120,
		heightSegments: 120,
		depth: 3000,
		param: 9.2,
		filterparam: .1,
		filter: [CIRCLE_FILTER],
		postgen: [MOUNTAINS_COLORS],
		effect: [DESTRUCTURE_EFFECT]
	};

	DEMO.initialize('canvas-3d', parameters);

	WINDOW.resizeCallback = function (inWidth, inHeight) {
		DEMO.resize(inWidth, inHeight);
	};
	DEMO.resize(WINDOW.ms_Width, WINDOW.ms_Height);

	mainLoop();

	//CSS animations

	const welcome = document.getElementsByClassName('welcome-screen')[0];
	welcome.addEventListener('click', e => {
		welcome.className += ' fade-out';
		setTimeout(() => {
			welcome.parentNode.removeChild(welcome);
		}, 350);
	});
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxTQUFTO0lBQUUsT0FBTyxHQUFHLEVBQUU7SUFBRSxNQUFNLEdBQUcsRUFBRTtJQUFFLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDekQsSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDOUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNyQixJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDOztBQUluQixNQUFNLElBQUksQ0FBQztBQUNWLFlBQVcsR0FBRztBQUNiLE1BQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLE1BQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFCLE1BQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7RUFDOUI7QUFDRCxPQUFNLEdBQUc7QUFDRixNQUFJO0FBQ0EsT0FBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztB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QUFTLEVBQUUsWUFBWTtBQUN2QixPQUFLLEVBQUUsS0FBSztBQUNaLFFBQU0sRUFBRSxLQUFLO0FBQ2IsZUFBYSxFQUFFLEdBQUc7QUFDbEIsZ0JBQWMsRUFBRSxHQUFHO0FBQ25CLE9BQUssRUFBRSxJQUFJO0FBQ1gsT0FBSyxFQUFFLEdBQUc7QUFDVixhQUFXLEVBQUUsRUFBRTtBQUNmLFFBQU0sRUFBRSxDQUFFLGFBQWEsQ0FBRTtBQUN6QixTQUFPLEVBQUUsQ0FBRSxnQkFBZ0IsQ0FBRTtBQUM3QixRQUFNLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRTtFQUM5QixDQUFDOztBQUVGLEtBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDOztBQUV6QyxPQUFNLENBQUMsY0FBYyxHQUFHLFVBQVMsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUFFLE1BQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQUUsQ0FBQztBQUN4RixLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUUvQyxTQUFRLEVBQUU7Ozs7QUFBQyxBQUlYLE9BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLFFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJO0FBQ3RDLFNBQU8sQ0FBQyxTQUFTLElBQUksV0FBVyxDQUFDO0FBQ2pDLFlBQVUsQ0FBQyxNQUFJO0FBQ2QsVUFBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDeEMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNSLENBQUMsQ0FBQztDQUNILENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcInVzZSBzdHJpY3RcIjtcblxubGV0IGFuaW1hdGlvbiwgaGVscGVycyA9IFtdLCBtaXhlcnMgPSBbXSwgcHVzaGVkID0gZmFsc2U7XG5sZXQgY2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2soKTtcbmxldCByZWFkeSA9IGZhbHNlO1xubGV0IHJlZHVjaW5nID0gZmFsc2U7XG5sZXQgaXNGcmFtZVN0ZXBwaW5nID0gZmFsc2U7XG5sZXQgdGltZVRvU3RlcCA9IDA7XG5cblxuXG5jbGFzcyBEZW1vIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5tc19DYW52YXMgPSBudWxsO1xuXHRcdHRoaXMubXNfUmVuZGVyZXIgPSBudWxsO1xuXHRcdHRoaXMubXNfQ2FtZXJhID0gbnVsbDtcblx0XHR0aGlzLm1zX1NjZW5lID0gbnVsbDtcblx0XHR0aGlzLm1zX0NvbnRyb2xzID0gbnVsbDtcblx0XHR0aGlzLm1zX1dhdGVyID0gbnVsbDtcblx0XHR0aGlzLm1zX1RlcnJhaW4gPSBudWxsO1xuXHRcdHRoaXMubXNfUmF5Y2FzdGVyID0gbnVsbDtcblx0XHR0aGlzLm1zX0NsaWNrYWJsZSA9IFtdO1xuXHRcdHRoaXMubXNfUGFyYW1ldGVycyA9IG51bGw7XG5cdFx0dGhpcy5tc19wYXJ0aWNsZVN5c3RlbSA9IG51bGw7XG5cdH1cblx0ZW5hYmxlKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGFDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIHJldHVybiAhISB3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0ICYmIChhQ2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgYUNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgfVxuXHRpbml0aWFsaXplKGluSWRDYW52YXMsIGluUGFyYW1ldGVycykge1xuXHRcdHRoaXMubXNfQ2FudmFzID0gJCgnIycraW5JZENhbnZhcyk7XG5cdFx0dGhpcy5tc19QYXJhbWV0ZXJzID0gaW5QYXJhbWV0ZXJzO1xuXHRcdC8vIEluaXRpYWxpemUgUmVuZGVyZXIsIENhbWVyYSwgUHJvamVjdG9yIGFuZCBTY2VuZVxuXHRcdHRoaXMubXNfUmVuZGVyZXIgPSB0aGlzLmVuYWJsZSA/IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgYW50aWFsaWFzOiB0cnVlIH0pIDogbmV3IFRIUkVFLkNhbnZhc1JlbmRlcmVyKCk7XG5cdFx0dGhpcy5tc19DYW52YXMuaHRtbCh0aGlzLm1zX1JlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXHRcdHRoaXMubXNfU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblx0XHR0aGlzLm1zX0NhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0NS4wLCBXSU5ET1cubXNfV2lkdGggLyBXSU5ET1cubXNfSGVpZ2h0LCAwLjUsIDMwMDAwMDApO1xuXHRcdHRoaXMubXNfQ2FtZXJhLnBvc2l0aW9uLnNldCguMiwgLU1hdGgubWF4KGluUGFyYW1ldGVycy53aWR0aCAqIDEuNSwgaW5QYXJhbWV0ZXJzLmhlaWdodCkgLyA4LCBpblBhcmFtZXRlcnMuaGVpZ2h0KTtcblx0XHR0aGlzLm1zX0NhbWVyYS5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCkpO1xuXG5cdFx0dGhpcy5tc19SYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG5cdFx0XG5cdFx0Ly8gSW5pdGlhbGl6ZSBPcmJpdCBjb250cm9sXHRcdFxuXHRcdHRoaXMubXNfQ29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyh0aGlzLm1zX0NhbWVyYSwgdGhpcy5tc19SZW5kZXJlci5kb21FbGVtZW50KTtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLnVzZXJQYW4gPSBmYWxzZTtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLnVzZXJQYW5TcGVlZCA9IDAuMDtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLm1heERpc3RhbmNlID0gNDAwMC4wO1xuXHRcdHRoaXMubXNfQ29udHJvbHMuZW5hYmxlS2V5cyA9IGZhbHNlO1xuXHRcdHRoaXMubXNfQ29udHJvbHMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEkgKiAuNDk1O1xuXHRcdHRoaXMubXNfQ29udHJvbHMubWluUG9sYXJBbmdsZSA9IC41O1xuXHRcdHRoaXMubXNfQ29udHJvbHMubWF4QXppbXV0aEFuZ2xlID0gMTtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLm1pbkF6aW11dGhBbmdsZSA9IC0xO1xuXHRcblx0XHQvLyBBZGQgbGlnaHRcblxuXHRcdHZhciBhbWJpZW50ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCggMHg4ODg4ODgpO1xuXHRcdHRoaXMubXNfU2NlbmUuYWRkKGFtYmllbnQpO1xuXHRcdC8vTGVmdCBMaWdodFxuXHRcdHZhciBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHg4ODg4ODgsIC45KTtcblx0XHRkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLnNldCgtNjAwLCAzMDAsIDYwMCk7XG5cdFx0dGhpcy5tc19TY2VuZS5hZGQoZGlyZWN0aW9uYWxMaWdodCk7XG5cdFx0Ly9SaWdodCBsaWdodFxuXHRcdHZhciBkaXJlY3Rpb25hbExpZ2h0MiA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ODg4ODg4LCAuOCk7XG5cdFx0ZGlyZWN0aW9uYWxMaWdodDIucG9zaXRpb24uc2V0KDYwMCwgODAwLCA2MDApO1xuXHRcdHRoaXMubXNfU2NlbmUuYWRkKGRpcmVjdGlvbmFsTGlnaHQyKTtcblx0XHQvL0JvdHRvbSBMaWdodFxuXHRcdHZhciBkaXJlY3Rpb25hbExpZ2h0MyA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ODg4ODg4LCAuMTUpO1xuXHRcdGRpcmVjdGlvbmFsTGlnaHQzLnBvc2l0aW9uLnNldCgwLCAwLCAxMDAwKTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0Myk7XG5cdFx0Ly9CYWNrIExpZ2h0XG5cdFx0dmFyIGRpcmVjdGlvbmFsTGlnaHQ0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHg3N0QwRkYsIC41KTtcblx0XHRkaXJlY3Rpb25hbExpZ2h0NC5wb3NpdGlvbi5zZXQoMCwgNjAwLCAtNjAwKTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0NCk7XG5cdFx0XG5cdFx0Ly8gQ3JlYXRlIHRlcnJhaW5cblx0XHR0aGlzLmxvYWRUZXJyYWluKGluUGFyYW1ldGVycyk7XG5cdFx0XG5cdFx0Ly8gTG9hZCB0ZXh0dXJlc1x0XHRcblx0XHR2YXIgd2F0ZXJOb3JtYWxzID0gbmV3IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJy4uL2Fzc2V0cy9pbWcvd2F0ZXJub3JtYWxzLmpwZycpO1xuXHRcdHdhdGVyTm9ybWFscy53cmFwUyA9IHdhdGVyTm9ybWFscy53cmFwVCA9IFRIUkVFLlNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nOyBcblx0XHRcblx0XHQvLyBDcmVhdGUgdGhlIHdhdGVyIGVmZmVjdFxuXHRcdHRoaXMubXNfV2F0ZXIgPSBuZXcgVEhSRUUuV2F0ZXIodGhpcy5tc19SZW5kZXJlciwgdGhpcy5tc19DYW1lcmEsIHRoaXMubXNfU2NlbmUsIHtcblx0XHRcdHRleHR1cmVXaWR0aDogNTEyLCBcblx0XHRcdHRleHR1cmVIZWlnaHQ6IDUxMixcblx0XHRcdHdhdGVyTm9ybWFsczogd2F0ZXJOb3JtYWxzLFxuXHRcdFx0YWxwaGE6IFx0MS4wLFxuXHRcdFx0c3VuRGlyZWN0aW9uOiBkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLm5vcm1hbGl6ZSgpLFxuXHRcdFx0c3VuQ29sb3I6IDB4RkZGRkZGLFxuXHRcdFx0d2F0ZXJDb2xvcjogMHg4RjgxQTEsXG5cdFx0XHRkaXN0b3J0aW9uU2NhbGU6IDIwLjBcblx0XHR9KTtcblx0XHR2YXIgYU1lc2hNaXJyb3IgPSBuZXcgVEhSRUUuTWVzaChcblx0XHRcdG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KGluUGFyYW1ldGVycy53aWR0aCAqIDUwMCwgaW5QYXJhbWV0ZXJzLmhlaWdodCAqIDUwMCwgMTAsIDEwKSwgXG5cdFx0XHR0aGlzLm1zX1dhdGVyLm1hdGVyaWFsXG5cdFx0KTtcblx0XHRhTWVzaE1pcnJvci5hZGQodGhpcy5tc19XYXRlcik7XG5cdFx0YU1lc2hNaXJyb3Iucm90YXRpb24ueCA9IC0gTWF0aC5QSSAqIDAuNTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChhTWVzaE1pcnJvcik7XG5cdFxuXHRcdC8vTG9hZCBvYmplY3RzXHRcblx0XHR0aGlzLmxvYWRTa3lCb3goKTtcblx0XHR0aGlzLmxvYWRHbGFjaWVycygxLCAxMDAwLCAyMDAsIC4xKTtcblx0XHR0aGlzLmxvYWRHbGFjaWVycygyLCA5MDAsIC0xMDAwLCAuMik7XG5cdFx0dGhpcy5sb2FkR2xhY2llcnMoMiwgMTUwMCwgLTMwMDAsIC4zKTtcblx0XHRmb3IgKHZhciB4ID0gMzsgeCA+IDA7IHgtLSkge1xuXHRcdFx0dGhpcy5sb2FkSWNlKHgsIDEwMDAsIDAsIDEpO1xuXHRcdFx0dGhpcy5sb2FkSWNlKHgsIDQwMCwgeCAqIDIwMCwgeCk7XG5cdFx0XHR0aGlzLmxvYWRJY2UoeCwgMjAwMCwgeCAqIDYwMCwgMSk7XG5cdFx0XHR0aGlzLmxvYWRJY2UoeCwgMjAwMCwgeCAqIC03MDAsIDEpO1xuXHRcdFx0dGhpcy5sb2FkSWNlKHgsIDgwMCwgeCAqIC04MDAsIDEuNCk7XG5cdFx0fVxuXHRcdHRoaXMubG9hZENhdCgpO1xuXHRcdC8vIHRoaXMubG9hZFNub3coaW5QYXJhbWV0ZXJzKTtcblxuXHRcdC8vTGlzdGVuIGZvciB0cmlnZ2VyXG5cdFx0Y29uc3QgbW91bnRhaW5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdW50YWlucycpO1xuXHRcdGNvbnN0IHBhdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXcnKTtcblx0XHRwYXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHR0aGlzLmhhbmRsZUJ1dHRvbigpO1xuXHRcdH0pO1xuXHRcdG1vdW50YWlucy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdHRoaXMubXNfVGVycmFpbi5jYWxsYmFjaygpO1xuXHRcdH0pO1xuXHRcdHRoaXMuaGFuZGxlS2V5RG93bigpO1xuXG5cdFx0Ly9BdWRpb1xuXHRcdHZhciBhdWRpbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG5cdCAgdmFyIHNvdXJjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuXHQgIHNvdXJjZS5zcmMgPSAnYXNzZXRzL3NvdW5kcy9zbGVlcC5tcDMnO1xuXHQgIGF1ZGlvLmxvb3AgPSB0cnVlO1xuXHQgIGF1ZGlvLmFwcGVuZENoaWxkKHNvdXJjZSk7XG5cdCAgLy8gYXVkaW8ucGxheSgpO1xuXG5cdCAgLy9hbGxvdyB6b29tXG5cdCAgc2V0VGltZW91dCgoKT0+e1xuXHQgIFx0cmVhZHkgPSB0cnVlO1xuXHQgIH0sIDc1MDApO1xuXHR9XG5cdGxvYWRTa3lCb3goKSB7XG5cdFx0bGV0IHNreVRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCdhc3NldHMvaW1nL2dyYWRpZW50XzAzLmpwZycpO1xuXHRcdHNreVRleHR1cmUud3JhcFMgPSBza3lUZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG5cdFx0c2t5VGV4dHVyZS5yZXBlYXQuc2V0KCAzLCAzICk7XG5cdFx0c2t5VGV4dHVyZS5mb3JtYXQgPSBUSFJFRS5SR0JGb3JtYXQ7XG5cblx0XHRsZXQgYVNoYWRlciA9IFRIUkVFLlNoYWRlckxpYlsncGhvbmcnXTtcblx0XHRhU2hhZGVyLnVuaWZvcm1zWydtYXAnXS52YWx1ZSA9IHNreVRleHR1cmU7XG5cblx0XHQvLyB2YXIgYVNreUJveE1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcblx0XHQgIC8vIGZyYWdtZW50U2hhZGVyOiBhU2hhZGVyLmZyYWdtZW50U2hhZGVyLFxuXHRcdCAgLy8gdmVydGV4U2hhZGVyOiBhU2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHQgIC8vIHVuaWZvcm1zOiBhU2hhZGVyLnVuaWZvcm1zLFxuXHRcdC8vICAgZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0Ly8gICBzaWRlOiBUSFJFRS5CYWNrU2lkZVxuXHRcdC8vIH0pO1xuXG5cdFx0dmFyIGFTa3lib3ggPSBuZXcgVEhSRUUuTWVzaChcblx0XHQgIG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxMDAwMCwgMzIsIDMyKSxcblx0XHQgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG5cdFx0ICBcdFx0bWFwOiBza3lUZXh0dXJlLFxuXHRcdFx0XHRcdHNpZGU6IFRIUkVFLkJhY2tTaWRlLFxuXHRcdFx0XHRcdHZlcnRleENvbG9yczogVEhSRUUuRmFjZUNvbG9ycyxcblx0XHRcdFx0XHRzaGFkaW5nOiBUSFJFRS5TbW9vdGhTaGFkaW5nXG5cdFx0XHRcdH0pXG5cdFx0KTtcblx0XHRcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChhU2t5Ym94KTtcblx0fVxuXHRsb2FkVGVycmFpbihpblBhcmFtZXRlcnMpIHtcblx0XHR2YXIgdGVycmFpbkdlbyA9IFRFUlJBSU5HRU4uR2V0KGluUGFyYW1ldGVycyk7XG5cdFx0dmFyIGljZVRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCdhc3NldHMvaW1nL3RleHR1cmVfMDAxLmpwZycpO1xuXHRcdHZhciB0ZXJyYWluTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBcblx0XHRcdG1hcDogaWNlVGV4dHVyZSwgXG5cdFx0XHRzaGFkaW5nOiBUSFJFRS5GbGF0U2hhZGluZywgXG5cdFx0XHRzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxuXHRcdFx0Y29sb3I6IG5ldyBUSFJFRS5Db2xvciggMHhDQ0NDRUUgKVxuXHRcdH0pO1xuXHRcdHRoaXMubXNfVGVycmFpbiA9IG5ldyBUSFJFRS5NZXNoKHRlcnJhaW5HZW8sIHRlcnJhaW5NYXRlcmlhbCk7XG5cdFx0dGhpcy5tc19UZXJyYWluLnBvc2l0aW9uLnkgPSAtIGluUGFyYW1ldGVycy5kZXB0aDtcblx0XHR0aGlzLm1zX1RlcnJhaW4ucG9zaXRpb24ueiA9IC00MDAwO1xuXHRcdHRoaXMubXNfVGVycmFpbi5jYWxsYmFjayA9ICgpID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHRoaXMubXNfVGVycmFpbi5wb3NpdGlvbi55KTtcblx0XHRcdGlmICh0aGlzLm1zX1RlcnJhaW4ucG9zaXRpb24ueSA8PSAtaW5QYXJhbWV0ZXJzLmRlcHRoKSB7XG5cdFx0XHRcdHJlZHVjaW5nID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMubXNfU2NlbmUucmVtb3ZlKHRoaXMubXNfVGVycmFpbik7XG5cdFx0XHRcdHRoaXMubG9hZFRlcnJhaW4oaW5QYXJhbWV0ZXJzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlZHVjaW5nID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gdGhpcy5tc19DbGlja2FibGUucHVzaCh0aGlzLm1zX1RlcnJhaW4pO1xuXHRcdHRoaXMubXNfU2NlbmUuYWRkKHRoaXMubXNfVGVycmFpbik7XG5cdH1cblx0bG9hZEdsYWNpZXJzKGluZGV4LCB6LCB4LCBzY2FsZSkge1xuXHRcdHZhciBvYmpMb2FkZXIgPSBuZXcgVEhSRUUuT0JKTG9hZGVyKCk7XG5cdFx0dmFyIG1zX1NjZW5lID0gdGhpcy5tc19TY2VuZTtcblx0XHR2YXIgaWNlVGV4dHVyZSA9IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJ2Fzc2V0cy9pbWcvdGV4dHVyZV8wMDEuanBnJyk7XG5cdFx0b2JqTG9hZGVyLmxvYWQoYGFzc2V0cy9sYW5kc2NhcGVfYXNzZXRzL2dsYWNpZXJfMCR7aW5kZXh9Lm9iamAsIGZ1bmN0aW9uKGdsYWNpZXIpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2dsYWNpZXInLCBnbGFjaWVyKTtcblx0XHRcdFx0Ly9sb2FkIGljZSB0ZXh0dXJlXG5cdFx0XHRcdGZvciAodmFyIGk9MDsgaTxnbGFjaWVyLmNoaWxkcmVuLmxlbmd0aDtpKysgKXtcblx0XHRcdFx0XHQvLyBnbGFjaWVyLmNoaWxkcmVuW2ldLmdlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXHRcdFx0XHRcdC8vIGdsYWNpZXIuY2hpbGRyZW5baV0uZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblx0XHRcdFx0XHRnbGFjaWVyLmNoaWxkcmVuW2ldLm1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcblx0XHRcdCAgXHRcdG1hcDogaWNlVGV4dHVyZSxcblx0XHRcdFx0XHRcdHNoYWRpbmc6IFRIUkVFLkZsYXRTaGFkaW5nLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBUSFJFRS5Db2xvciggMHhDQ0NDRUUgKSxcblx0XHRcdFx0XHRcdHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRnbGFjaWVyLnBvc2l0aW9uLnogPSB6O1xuXHRcdFx0XHRnbGFjaWVyLnBvc2l0aW9uLnggPSB4O1xuXHRcdFx0XHRnbGFjaWVyLnNjYWxlLnNldChzY2FsZSxzY2FsZSxzY2FsZSk7XG5cdFx0XHRcdG1zX1NjZW5lLmFkZChnbGFjaWVyKTtcblx0XHR9KTtcblx0fVxuXHRsb2FkSWNlKGluZGV4LCB6LCB4LCBzY2FsZSkge1xuXHRcdGNvbnN0IG9iakxvYWRlciA9IG5ldyBUSFJFRS5PQkpMb2FkZXIoKTtcblx0XHRjb25zdCBtc19TY2VuZSA9IHRoaXMubXNfU2NlbmU7XG5cdFx0Y29uc3QgaWNlVGV4dHVyZSA9IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJ2Fzc2V0cy9pbWcvdGV4dHVyZV8wMDEuanBnJyk7XG5cdFx0b2JqTG9hZGVyLmxvYWQoYGFzc2V0cy9sYW5kc2NhcGVfYXNzZXRzL2Zsb2VfMCR7aW5kZXh9Lm9iamAsIGdsYWNpZXIgPT4ge1xuXHRcdFx0XHQvL2xvYWQgaWNlIHRleHR1cmVcblx0XHRcdFx0Zm9yICh2YXIgaT0wOyBpPGdsYWNpZXIuY2hpbGRyZW4ubGVuZ3RoO2krKyApe1xuXHRcdFx0XHRcdGdsYWNpZXIuY2hpbGRyZW5baV0uZ2VvbWV0cnkuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cdFx0XHRcdFx0Z2xhY2llci5jaGlsZHJlbltpXS5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXHRcdFx0XHRcdGdsYWNpZXIuY2hpbGRyZW5baV0ubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuXHRcdFx0ICBcdFx0bWFwOiBpY2VUZXh0dXJlLFxuXHRcdFx0XHRcdFx0c2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmcsXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IFRIUkVFLkNvbG9yKCAweENDQ0NFRSApXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Z2xhY2llci5wb3NpdGlvbi56ID0gejtcblx0XHRcdFx0Z2xhY2llci5wb3NpdGlvbi54ID0geDtcblx0XHRcdFx0Z2xhY2llci5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblx0XHRcdFx0Z2xhY2llci5zY2FsZS5zZXQoc2NhbGUsOCxzY2FsZSk7XG5cdFx0XHRcdG1zX1NjZW5lLmFkZChnbGFjaWVyKTtcblx0XHR9KTtcblx0fVxuXHRsb2FkU25vdyhpblBhcmFtZXRlcnMpIHtcblx0XHRjb25zdCByYW5kID0gdiA9PiB7XG5cdFx0XHRyZXR1cm4gKHYgKiAoTWF0aC5yYW5kb20oKSAtIDAuNSkpO1xuXHRcdH1cblx0XHRjb25zdCB0ZXh0dXJlID0gVEhSRUUuVGV4dHVyZUxvYWRlcignYXNzZXRzL2ltZy9zbm93Zmxha2UucG5nJyk7XG5cdFx0bGV0IG51bVBhcnRpY2xlcyA9IDEwMDAwMDtcblx0XHRsZXQgd2lkdGggPSBpblBhcmFtZXRlcnMud2lkdGg7XG5cdFx0bGV0IGhlaWdodCA9IGluUGFyYW1ldGVycy5oZWlnaHQvMztcblx0XHRsZXQgZGVwdGggPSAxMDAwMDtcblx0XHRsZXQgcGFyYW1ldGVycyA9IHtcblx0XHRcdFx0Y29sb3I6IDB4RkZGRkZGLFxuXHRcdFx0XHRoZWlnaHQ6IDgwMDAwLFxuXHRcdFx0XHRyYWRpdXNYOiAxMCxcblx0XHRcdFx0cmFkaXVzWjogMTAsXG5cdFx0XHRcdHNpemU6IDEwMCxcblx0XHRcdFx0c2NhbGU6IDEuMCxcblx0XHRcdFx0b3BhY2l0eTogMC44LFxuXHRcdFx0XHRzcGVlZEg6IC4xLFxuXHRcdFx0XHRzcGVlZFY6IC4xXG5cdFx0XHR9O1xuXHRcdFx0bGV0IHN5c3RlbUdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cdFx0XHRsZXQgc3lzdGVtTWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuXHRcdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHRcdGNvbG9yOiAgeyB0eXBlOiAnYycsIHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoIHBhcmFtZXRlcnMuY29sb3IgKSB9LFxuXHRcdFx0XHRcdGhlaWdodDogeyB0eXBlOiAnZicsIHZhbHVlOiBwYXJhbWV0ZXJzLmhlaWdodCB9LFxuXHRcdFx0XHRcdGVsYXBzZWRUaW1lOiB7IHR5cGU6ICdmJywgdmFsdWU6IDAgfSxcblx0XHRcdFx0XHRyYWRpdXNYOiB7IHR5cGU6ICdmJywgdmFsdWU6IHBhcmFtZXRlcnMucmFkaXVzWCB9LFxuXHRcdFx0XHRcdHJhZGl1c1o6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5yYWRpdXNaIH0sXG5cdFx0XHRcdFx0c2l6ZTogeyB0eXBlOiAnZicsIHZhbHVlOiBwYXJhbWV0ZXJzLnNpemUgfSxcblx0XHRcdFx0XHRzY2FsZTogeyB0eXBlOiAnZicsIHZhbHVlOiBwYXJhbWV0ZXJzLnNjYWxlIH0sXG5cdFx0XHRcdFx0dGV4dHVyZTogeyB0eXBlOiAndCcsIHZhbHVlOiB0ZXh0dXJlIH0sXG5cdFx0XHRcdFx0b3BhY2l0eTogeyB0eXBlOiAnZicsIHZhbHVlOiBwYXJhbWV0ZXJzLm9wYWNpdHkgfSxcblx0XHRcdFx0XHRzcGVlZEg6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5zcGVlZEggfSxcblx0XHRcdFx0XHRzcGVlZFY6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5zcGVlZFYgfVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnc3RlcDA3X3ZzJyApLnRleHRDb250ZW50LFxuXHRcdFx0XHRmcmFnbWVudFNoYWRlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdzdGVwMDlfZnMnICkudGV4dENvbnRlbnQsXG5cdFx0XHRcdGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nLFxuXHRcdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRmb3IoIHZhciBpID0gMDsgaSA8IG51bVBhcnRpY2xlczsgaSsrICkge1xuXHRcdFx0dmFyIHZlcnRleCA9IG5ldyBUSFJFRS5WZWN0b3IzKFxuXHRcdFx0XHRcdHJhbmQoIHdpZHRoICksXG5cdFx0XHRcdFx0TWF0aC5yYW5kb20oKSAqIGhlaWdodCxcblx0XHRcdFx0XHRyYW5kKCBkZXB0aCApXG5cdFx0XHRcdCk7XG5cblx0XHRcdHN5c3RlbUdlb21ldHJ5LnZlcnRpY2VzLnB1c2goIHZlcnRleCApO1xuXHRcdH1cblxuXG5cdFx0dGhpcy5tc19wYXJ0aWNsZVN5c3RlbSA9IG5ldyBUSFJFRS5Qb2ludHMoIHN5c3RlbUdlb21ldHJ5LCBzeXN0ZW1NYXRlcmlhbCApO1xuXHRcdHRoaXMubXNfcGFydGljbGVTeXN0ZW0ucG9zaXRpb24ueSA9IC1oZWlnaHQvMjtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZCggdGhpcy5tc19wYXJ0aWNsZVN5c3RlbSApO1xuXHR9XG5cdGxvYWRDYXQoKSB7XG5cdFx0Y29uc3QganNvbkxvYWRlciA9IG5ldyBUSFJFRS5KU09OTG9hZGVyKCk7XG5cdFx0anNvbkxvYWRlci5sb2FkKCBcImFzc2V0cy9qcy9jYXRfYW5pbWF0ZWQuanNcIiwgICggZ2VvbWV0cnksIG1hdGVyaWFscyApID0+IHtcblx0XHRcdHRoaXMubG9hZEFuaW1hdGlvbiggZ2VvbWV0cnksIG1hdGVyaWFscywgMCwgMzAsIDEwMDAsIDE1LCB0aGlzLm1zX1NjZW5lLCBcImFzc2V0cy9pbWcvY2F0X2RpZmZ1c2UuanBnXCIgKTtcblx0XHR9KTtcblx0XHRqc29uTG9hZGVyLmxvYWQoIFwiYXNzZXRzL2pzL2NhdF9hbmltYXRlZF9oYXQuanNcIiwgICggZ2VvbWV0cnksIG1hdGVyaWFscyApICA9PiB7XG5cdFx0XHR0aGlzLmxvYWRBbmltYXRpb24oIGdlb21ldHJ5LCBtYXRlcmlhbHMsIDAsIDMwLCAxMDAwLCAxNSwgdGhpcy5tc19TY2VuZSwgXCJhc3NldHMvaW1nL2hhdF9kaWZmdXNlLmpwZ1wiICk7XG5cdFx0fSk7XG5cdH1cblx0bG9hZEFuaW1hdGlvbiggZ2VvbWV0cnksIG1hdGVyaWFscywgeCwgeSwgeiwgcywgc2NlbmUsIHRleHR1cmUgKSB7XG5cdFx0bGV0IG1peGVyO1xuXHRcdGNvbnN0IG9ialRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKHRleHR1cmUpO1xuXHRcdGdlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xuICBcdC8vIGdlb21ldHJ5LmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG4gIFx0Z2VvbWV0cnkuZHluYW1pYyA9IHRydWVcblx0XHRnZW9tZXRyeS5fX2RpcnR5VmVydGljZXMgPSB0cnVlO1xuXHRcdGdlb21ldHJ5Ll9fZGlydHlOb3JtYWxzID0gdHJ1ZTtcblxuXHRcdC8vRmxpcCBub3JtYWxzXG5cdFx0Zm9yKHZhciBpID0gMDsgaTxnZW9tZXRyeS5mYWNlcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICBnZW9tZXRyeS5mYWNlc1tpXS5ub3JtYWwueCA9IC0xKmdlb21ldHJ5LmZhY2VzW2ldLm5vcm1hbC54O1xuXHRcdCAgICBnZW9tZXRyeS5mYWNlc1tpXS5ub3JtYWwueSA9IC0xKmdlb21ldHJ5LmZhY2VzW2ldLm5vcm1hbC55O1xuXHRcdCAgICBnZW9tZXRyeS5mYWNlc1tpXS5ub3JtYWwueiA9IC0xKmdlb21ldHJ5LmZhY2VzW2ldLm5vcm1hbC56O1xuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG1hdGVyaWFscy5sZW5ndGg7IGkgKysgKSB7XG5cdFx0XHRsZXQgbSA9IG1hdGVyaWFsc1tpXTtcblx0XHRcdG0uc2tpbm5pbmcgPSB0cnVlO1xuXHRcdFx0bS5zaGFkaW5nID0gVEhSRUUuRmxhdFNoYWRpbmc7XG5cdFx0XHRtLnNoaW5pbmVzcyA9IDEwMDtcblx0XHRcdG0ubWFwID0gb2JqVGV4dHVyZTtcblx0XHRcdG0uY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoIDB4ZGRkZGRkICk7XG5cdFx0XHRtLnZlcnRleENvbG9ycyA9IFRIUkVFLkZhY2VDb2xvcnM7XG5cdFx0fVxuXHRcdFxuXHRcdGxldCBjYXRfbWVzaCA9IG5ldyBUSFJFRS5Ta2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsc1swXSk7XG5cdFx0Ly8gY2F0X21lc2gucm90YXRpb24ueCA9IE1hdGguUEkgKiAtLjU7XG5cdFx0Y2F0X21lc2gucG9zaXRpb24uc2V0KCB4LCB5LCB6ICk7XG5cdFx0Y2F0X21lc2guc2NhbGUuc2V0KCBzLCBzLCBzICk7XG5cdFx0Y2F0X21lc2guY2FzdFNoYWRvdyA9IHRydWU7XG5cdFx0Y2F0X21lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cdFx0c2NlbmUuYWRkKCBjYXRfbWVzaCApO1xuXG5cdFx0bGV0IGNsaXBCb25lcyA9IGdlb21ldHJ5LmFuaW1hdGlvbnNbMF07XG5cdFx0bGV0IGJvbmVBY3Rpb24gPSBuZXcgVEhSRUUuQW5pbWF0aW9uQWN0aW9uKCBjbGlwQm9uZXMgKTtcblx0XHRib25lQWN0aW9uLmxvb3AgPSBUSFJFRS5Mb29wT25jZTtcblx0XHRib25lQWN0aW9uLmxvb3BDb3VudCA9IDE7XG5cdFx0Ym9uZUFjdGlvbi5hY3Rpb25UaW1lID0gMjtcblx0XHRtaXhlciA9IG5ldyBUSFJFRS5BbmltYXRpb25NaXhlciggY2F0X21lc2ggKTtcblx0XHRtaXhlci5hZGRBY3Rpb24oIGJvbmVBY3Rpb24gKTtcblx0XHRtaXhlcnMucHVzaChtaXhlcik7XG5cdH1cblx0ZGlzcGxheSgpIHtcblx0XHR0aGlzLm1zX1dhdGVyLnJlbmRlcigpO1xuXHRcdHRoaXMubXNfUmVuZGVyZXIucmVuZGVyKHRoaXMubXNfU2NlbmUsIHRoaXMubXNfQ2FtZXJhKTtcblx0fVxuXHRpbml0aWFsWm9vbSgpIHtcblx0XHRsZXQgZm92ID0gdGhpcy5tc19DYW1lcmEuZm92O1xuXHRcdGxldCB6b29tID0gdGhpcy5tc19DYW1lcmEuem9vbTtcblx0XHRjb25zdCBpbmMgPSAwLjAxO1xuXHRcdGlmICh6b29tIDwgMikge1xuXHRcdFx0dGhpcy5tc19DYW1lcmEuem9vbSArPSBpbmM7XG5cdCAgICB0aGlzLm1zX0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlYWR5ID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHVwZGF0ZSgpIHtcblx0XHRjb25zdCBpblBhcmFtZXRlcnMgPSB0aGlzLm1zX1BhcmFtZXRlcnM7XG5cdFx0dGhpcy5tc19XYXRlci5tYXRlcmlhbC51bmlmb3Jtcy50aW1lLnZhbHVlICs9IDEuMCAvIDYwLjA7XG5cblx0XHRpZiAocmVkdWNpbmcpIHtcblx0XHRcdHRoaXMubXNfVGVycmFpbi5wb3NpdGlvbi55IC09IDIwO1xuXHRcdFx0dGhpcy5tc19UZXJyYWluLmNhbGxiYWNrKCk7XG5cdFx0fVxuXHRcdGlmICgodGhpcy5tc19UZXJyYWluLnBvc2l0aW9uLnkgPCAtaW5QYXJhbWV0ZXJzLmRlcHRoICogMC41KSAmJiAhcmVkdWNpbmcpIHtcblx0XHRcdHRoaXMubXNfVGVycmFpbi5wb3NpdGlvbi55ICs9IDIwO1xuXHRcdH1cblx0XHRsZXQgZGVsdGEgPSBjbG9jay5nZXREZWx0YSgpO1xuXHRcdGxldCBlbGFwc2VkVGltZSA9IGNsb2NrLmdldEVsYXBzZWRUaW1lKCk7XG5cblx0XHRpZih0aGlzLm1zX3BhcnRpY2xlU3lzdGVtKSB7XG5cdFx0XHR0aGlzLm1zX3BhcnRpY2xlU3lzdGVtLm1hdGVyaWFsLnVuaWZvcm1zLmVsYXBzZWRUaW1lLnZhbHVlID0gZWxhcHNlZFRpbWUgKiAxMDtcblx0XHR9XG5cblx0XHRpZiggbWl4ZXJzLmxlbmd0aCApIHtcblx0XHRcdGZvciAodmFyIGk9MDsgaTxtaXhlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bWl4ZXJzW2ldLnVwZGF0ZShkZWx0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChyZWFkeSkgdGhpcy5pbml0aWFsWm9vbSgpO1xuXHRcdHRoaXMubXNfQ29udHJvbHMudXBkYXRlKCk7XG5cdFx0dGhpcy5kaXNwbGF5KCk7XG5cdH1cblx0aGFuZGxlQnV0dG9uKCkge1xuXHRcdHB1c2hlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaT0wOyBpPG1peGVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Zm9yICh2YXIgeT0wO3k8bWl4ZXJzW2ldLmFjdGlvbnMubGVuZ3RoO3krKykge1xuXHRcdFx0XHRtaXhlcnNbaV0uYWN0aW9uc1t5XS5lbmFibGVkID0gdHJ1ZTtcblx0XHRcdFx0bWl4ZXJzW2ldLmFjdGlvbnNbeV0ubG9vcENvdW50ID0gMDtcblx0XHRcdFx0bWl4ZXJzW2ldLmFjdGlvbnNbeV0ubG9vcCA9IFRIUkVFLkxvb3BPbmNlO1xuXHRcdFx0XHRtaXhlcnNbaV0uYWN0aW9uc1t5XS5hY3Rpb25UaW1lID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aGFuZGxlS2V5RG93bigpIHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG5cdFx0XHRzd2l0Y2ggKGUua2V5Q29kZSkge1xuXHRcdFx0XHRjYXNlIDY5OlxuXHRcdFx0XHRcdHRoaXMubXNfVGVycmFpbi5jYWxsYmFjaygpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDg3OlxuXHRcdFx0XHRjYXNlIDgxOlxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlQnV0dG9uKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cmVzaXplKGluV2lkdGgsIGluSGVpZ2h0KSB7XG5cdFx0dGhpcy5tc19DYW1lcmEuYXNwZWN0ID0gIGluV2lkdGggLyBpbkhlaWdodDtcblx0XHR0aGlzLm1zX0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0dGhpcy5tc19SZW5kZXJlci5zZXRTaXplKGluV2lkdGgsIGluSGVpZ2h0KTtcblx0XHR0aGlzLm1zX0NhbnZhcy5odG1sKHRoaXMubXNfUmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cdFx0dGhpcy5kaXNwbGF5KCk7XG5cdH1cbn07XG5cbmNvbnN0IERFTU8gPSBuZXcgRGVtbztcblxuZnVuY3Rpb24gbWFpbkxvb3AoKSB7XG5cdHJlcXVlc3RBbmltYXRpb25GcmFtZShtYWluTG9vcCk7XG5cdERFTU8udXBkYXRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZURvd24oZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBtb3VzZSA9IG5ldyBUSFJFRS5WZWN0b3IyKFxuICAgICAgICAoIGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDEsIFxuICAgICAgICAtICggZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCApICogMiArIDEgKTtcblxuICAgIERFTU8ubXNfUmF5Y2FzdGVyLnNldEZyb21DYW1lcmEoIG1vdXNlLCBERU1PLm1zX0NhbWVyYSApO1xuICAgIHZhciBpbnRlcnNlY3RzID0gREVNTy5tc19SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyggREVNTy5tc19DbGlja2FibGUgKTsgICAgXG5cbiAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGggPiAwKSB7ICBcbiAgICAgICAgaW50ZXJzZWN0c1swXS5vYmplY3QuY2FsbGJhY2soKTtcbiAgICB9ICAgICAgICAgICAgICAgIFxufVxuXG4kKGZ1bmN0aW9uKCkge1xuXHRXSU5ET1cuaW5pdGlhbGl6ZSgpO1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25Eb2N1bWVudE1vdXNlRG93biwgZmFsc2UpO1xuXHRcblx0dmFyIHBhcmFtZXRlcnMgPSB7XG5cdFx0YWxlYTogUkFORF9NVCxcblx0XHRnZW5lcmF0b3I6IFBOX0dFTkVSQVRPUixcblx0XHR3aWR0aDogMjAwMDAsXG5cdFx0aGVpZ2h0OiAxNDAwMCxcblx0XHR3aWR0aFNlZ21lbnRzOiAxMjAsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IDEyMCxcblx0XHRkZXB0aDogMzAwMCxcblx0XHRwYXJhbTogOS4yLFxuXHRcdGZpbHRlcnBhcmFtOiAuMSxcblx0XHRmaWx0ZXI6IFsgQ0lSQ0xFX0ZJTFRFUiBdLFxuXHRcdHBvc3RnZW46IFsgTU9VTlRBSU5TX0NPTE9SUyBdLFxuXHRcdGVmZmVjdDogWyBERVNUUlVDVFVSRV9FRkZFQ1QgXVxuXHR9O1xuXHRcblx0REVNTy5pbml0aWFsaXplKCdjYW52YXMtM2QnLCBwYXJhbWV0ZXJzKTtcblx0XG5cdFdJTkRPVy5yZXNpemVDYWxsYmFjayA9IGZ1bmN0aW9uKGluV2lkdGgsIGluSGVpZ2h0KSB7IERFTU8ucmVzaXplKGluV2lkdGgsIGluSGVpZ2h0KTsgfTtcblx0REVNTy5yZXNpemUoV0lORE9XLm1zX1dpZHRoLCBXSU5ET1cubXNfSGVpZ2h0KTtcblx0XG5cdG1haW5Mb29wKCk7XG5cblx0Ly9DU1MgYW5pbWF0aW9uc1xuXG5cdGNvbnN0IHdlbGNvbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd3ZWxjb21lLXNjcmVlbicpWzBdO1xuXHR3ZWxjb21lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG5cdFx0d2VsY29tZS5jbGFzc05hbWUgKz0gJyBmYWRlLW91dCc7XG5cdFx0c2V0VGltZW91dCgoKT0+e1xuXHRcdFx0d2VsY29tZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdlbGNvbWUpO1xuXHRcdH0sIDM1MCk7XG5cdH0pO1xufSk7Il19
