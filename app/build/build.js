(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

let animation,
    helpers = [],
    mixers = [],
    pushed = false;
let clock = new THREE.Clock();
let ready = false;
let reducing = false;
let isFrameStepping = false;
let timeToStep = 0;

class Demo {
	constructor() {
		this.ms_Canvas = null;
		this.ms_Renderer = null;
		this.ms_Camera = null;
		this.ms_Scene = null;
		this.ms_Controls = null;
		this.ms_Water = null;
		this.ms_Terrain = null;
		this.ms_Raycaster = null;
		this.ms_Clickable = [];
		this.ms_Parameters = null;
		this.ms_particleSystem = null;
	}
	enable() {
		try {
			var aCanvas = document.createElement('canvas');
			return !!window.WebGLRenderingContext && (aCanvas.getContext('webgl') || aCanvas.getContext('experimental-webgl'));
		} catch (e) {
			return false;
		}
	}
	initialize(inIdCanvas, inParameters) {
		this.ms_Canvas = $('#' + inIdCanvas);
		this.ms_Parameters = inParameters;
		// Initialize Renderer, Camera, Projector and Scene
		this.ms_Renderer = this.enable ? new THREE.WebGLRenderer({ antialias: true }) : new THREE.CanvasRenderer();
		this.ms_Canvas.html(this.ms_Renderer.domElement);
		this.ms_Scene = new THREE.Scene();
		this.ms_Camera = new THREE.PerspectiveCamera(55.0, WINDOW.ms_Width / WINDOW.ms_Height, 0.5, 3000000);
		this.ms_Camera.position.set(0, -Math.max(inParameters.width * 1.5, inParameters.height) / 8, inParameters.height);
		this.ms_Camera.lookAt(new THREE.Vector3(0, 0, 0));

		this.ms_Raycaster = new THREE.Raycaster();

		// Initialize Orbit control		
		this.ms_Controls = new THREE.OrbitControls(this.ms_Camera, this.ms_Renderer.domElement);
		this.ms_Controls.userPan = false;
		this.ms_Controls.userPanSpeed = 0.0;
		this.ms_Controls.maxDistance = 4000.0;
		this.ms_Controls.enableKeys = false;
		this.ms_Controls.maxPolarAngle = Math.PI * .495;
		this.ms_Controls.maxAzimuthAngle = 1;
		this.ms_Controls.minAzimuthAngle = -1;

		// Add light

		var ambient = new THREE.AmbientLight(0x888888);
		this.ms_Scene.add(ambient);
		//Left Light
		var directionalLight = new THREE.DirectionalLight(0x888888, .9);
		directionalLight.position.set(-600, 300, 600);
		this.ms_Scene.add(directionalLight);
		//Right light
		var directionalLight2 = new THREE.DirectionalLight(0x888888, .8);
		directionalLight2.position.set(600, 800, 600);
		this.ms_Scene.add(directionalLight2);
		//Bottom Light
		var directionalLight3 = new THREE.DirectionalLight(0x888888, .15);
		directionalLight3.position.set(0, 0, 1000);
		this.ms_Scene.add(directionalLight3);
		//Back Light
		var directionalLight4 = new THREE.DirectionalLight(0x77D0FF, .5);
		directionalLight4.position.set(0, 600, -600);
		this.ms_Scene.add(directionalLight4);

		// Create terrain
		this.loadTerrain(inParameters);

		// Load textures		
		var waterNormals = new THREE.ImageUtils.loadTexture('../assets/img/waternormals.jpg');
		waterNormals.wrapS = waterNormals.wrapT = THREE.SphericalReflectionMapping;

		// Create the water effect
		this.ms_Water = new THREE.Water(this.ms_Renderer, this.ms_Camera, this.ms_Scene, {
			textureWidth: 512,
			textureHeight: 512,
			waterNormals: waterNormals,
			alpha: 1.0,
			sunDirection: directionalLight.position.normalize(),
			sunColor: 0xFFFFFF,
			waterColor: 0x8F81A1,
			distortionScale: 20.0
		});
		var aMeshMirror = new THREE.Mesh(new THREE.PlaneBufferGeometry(inParameters.width * 500, inParameters.height * 500, 10, 10), this.ms_Water.material);
		aMeshMirror.add(this.ms_Water);
		aMeshMirror.rotation.x = -Math.PI * 0.5;
		this.ms_Scene.add(aMeshMirror);

		//Load objects	
		this.loadSkyBox();
		this.loadGlaciers();
		this.loadIce();
		this.loadCat();
		// this.loadSnow(inParameters);

		//Listen for trigger
		const buttons = document.getElementsByClassName('trigger');
		[].slice.call(buttons).forEach(button => {
			button.addEventListener('click', event => {
				this.handleButton();
			});
		});
		this.handleKeyDown();

		//Audio
		var audio = document.createElement('audio');
		var source = document.createElement('source');
		source.src = 'assets/sounds/sleep.mp3';
		audio.loop = true;
		audio.appendChild(source);
		// audio.play();

		//allow zoom
		setTimeout(() => {
			ready = true;
		}, 10000);
	}
	loadSkyBox() {
		var skyTexture = THREE.ImageUtils.loadTexture('assets/img/gradient_03.jpg');
		// skyTexture.wrapS = skyTexture.wrapT = THREE.RepeatWrapping;

		// var aSkyBoxMaterial = new THREE.ShaderMaterial({
		//   fragmentShader: aShader.fragmentShader,
		//   vertexShader: aShader.vertexShader,
		//   uniforms: aShader.uniforms,
		//   depthWrite: false,
		//   side: THREE.BackSide
		// });

		var aSkybox = new THREE.Mesh(new THREE.SphereGeometry(10000, 32, 32), new THREE.MeshPhongMaterial({
			map: skyTexture,
			side: THREE.BackSide,
			vertexColors: THREE.FaceColors,
			shading: THREE.SmoothShading
		}));

		this.ms_Scene.add(aSkybox);
	}
	loadTerrain(inParameters) {
		var terrainGeo = TERRAINGEN.Get(inParameters);
		var iceTexture = THREE.ImageUtils.loadTexture('assets/img/texture_001.jpg');
		var terrainMaterial = new THREE.MeshPhongMaterial({ map: iceTexture, shading: THREE.FlatShading, side: THREE.DoubleSide });
		terrainMaterial.color = new THREE.Color(0xCCCCEE);
		this.ms_Terrain = new THREE.Mesh(terrainGeo, terrainMaterial);
		this.ms_Terrain.position.y = -inParameters.depth;
		this.ms_Terrain.position.z = -4000;
		this.ms_Terrain.callback = () => {
			// console.log(this.ms_Terrain.position.y);
			if (this.ms_Terrain.position.y <= -inParameters.depth) {
				reducing = false;
				this.ms_Scene.remove(this.ms_Terrain);
				this.loadTerrain(inParameters);
			} else {
				reducing = true;
			}
		};
		// this.ms_Clickable.push(this.ms_Terrain);
		this.ms_Scene.add(this.ms_Terrain);
	}
	loadGlaciers() {
		var objLoader = new THREE.OBJLoader();
		var ms_Scene = this.ms_Scene;
		var iceTexture = THREE.ImageUtils.loadTexture('assets/img/texture_001.jpg');
		objLoader.load('assets/landscape_assets/glacier_01.obj', function (glacier) {

			//load ice texture
			for (var i = 0; i < glacier.children.length; i++) {
				glacier.children[i].material = new THREE.MeshPhongMaterial({
					map: iceTexture,
					specularMap: iceTexture,
					shading: THREE.SmoothShading
				});
			}
			// physics_glacier = new Physijs.BoxMesh(glacier.geometry, );
			glacier.position.z = 1000;
			glacier.position.x = 200;
			glacier.scale.set(.1, .1, .1);
			ms_Scene.add(glacier);
		});
		objLoader.load('assets/landscape_assets/glacier_02.obj', function (glacier) {

			//load ice texture
			for (var i = 0; i < glacier.children.length; i++) {
				glacier.children[i].material = new THREE.MeshPhongMaterial({
					map: iceTexture,
					specularMap: iceTexture,
					shading: THREE.SmoothShading
				});
			}

			glacier.position.z = 900;
			glacier.position.x = -1000;
			glacier.scale.set(.2, .2, .2);
			ms_Scene.add(glacier);
		});
	}
	loadIce() {
		const objLoader = new THREE.OBJLoader();
		const ms_Scene = this.ms_Scene;
		const iceTexture = THREE.ImageUtils.loadTexture('assets/img/texture_001.jpg');
		for (var x = 3; x > 0; x--) {
			objLoader.load(`assets/landscape_assets/floe_0${ x }.obj`, glacier => {
				//load ice texture
				for (var i = 0; i < glacier.children.length; i++) {
					glacier.children[i].material = new THREE.MeshPhongMaterial({
						map: iceTexture,
						specularMap: iceTexture,
						shading: THREE.SmoothShading
					});
				}
				glacier.position.z = 1000;
				glacier.position.x = 0;
				glacier.receiveShadow = true;
				glacier.scale.set(1, 8, 1);
				for (let y = 0; y < 4; y++) {
					let glacierCopy = glacier.clone();
					glacierCopy.position.z = 500 / y * Math.random();
					glacierCopy.position.x = 200 * Math.pow(y, x) * Math.random();
					ms_Scene.add(glacierCopy);
				}
				ms_Scene.add(glacier);
			});
		}
	}
	loadSnow(inParameters) {
		const rand = v => {
			return v * (Math.random() - 0.5);
		};
		const texture = THREE.TextureLoader('assets/img/snowflake.png');
		let numParticles = 100000;
		let width = inParameters.width;
		let height = inParameters.height / 3;
		let depth = 10000;
		let parameters = {
			color: 0xFFFFFF,
			height: 80000,
			radiusX: 10,
			radiusZ: 10,
			size: 100,
			scale: 1.0,
			opacity: 0.8,
			speedH: .1,
			speedV: .1
		};
		let systemGeometry = new THREE.Geometry();
		let systemMaterial = new THREE.ShaderMaterial({
			uniforms: {
				color: { type: 'c', value: new THREE.Color(parameters.color) },
				height: { type: 'f', value: parameters.height },
				elapsedTime: { type: 'f', value: 0 },
				radiusX: { type: 'f', value: parameters.radiusX },
				radiusZ: { type: 'f', value: parameters.radiusZ },
				size: { type: 'f', value: parameters.size },
				scale: { type: 'f', value: parameters.scale },
				texture: { type: 't', value: texture },
				opacity: { type: 'f', value: parameters.opacity },
				speedH: { type: 'f', value: parameters.speedH },
				speedV: { type: 'f', value: parameters.speedV }
			},
			vertexShader: document.getElementById('step07_vs').textContent,
			fragmentShader: document.getElementById('step09_fs').textContent,
			blending: THREE.AdditiveBlending,
			transparent: true,
			depthTest: false
		});

		for (var i = 0; i < numParticles; i++) {
			var vertex = new THREE.Vector3(rand(width), Math.random() * height, rand(depth));

			systemGeometry.vertices.push(vertex);
		}

		this.ms_particleSystem = new THREE.Points(systemGeometry, systemMaterial);
		this.ms_particleSystem.position.y = -height / 2;
		this.ms_Scene.add(this.ms_particleSystem);
	}
	loadCat() {
		const jsonLoader = new THREE.JSONLoader();
		jsonLoader.load("assets/js/cat_animated.js", (geometry, materials) => {
			this.loadAnimation(geometry, materials, 0, 30, 1000, 15, this.ms_Scene, "assets/img/cat_diffuse.jpg");
		});
		jsonLoader.load("assets/js/cat_animated_hat.js", (geometry, materials) => {
			this.loadAnimation(geometry, materials, 0, 30, 1000, 15, this.ms_Scene, "assets/img/hat_diffuse.jpg");
		});
	}
	loadAnimation(geometry, materials, x, y, z, s, scene, texture) {
		let mixer;
		const objTexture = THREE.ImageUtils.loadTexture(texture);
		// geometry.computeFaceNormals();
		// geometry.computeVertexNormals();
		geometry.dynamic = true;
		geometry.__dirtyVertices = true;
		geometry.__dirtyNormals = true;

		//Flip normals
		for (var i = 0; i < geometry.faces.length; i++) {
			geometry.faces[i].normal.x = -1 * geometry.faces[i].normal.x;
			geometry.faces[i].normal.y = -1 * geometry.faces[i].normal.y;
			geometry.faces[i].normal.z = -1 * geometry.faces[i].normal.z;
		}

		for (let i = 0; i < materials.length; i++) {
			let m = materials[i];
			m.skinning = true;
			m.shading = THREE.FlatShading;
			m.shininess = 100;
			m.map = objTexture;
			m.color = new THREE.Color(0xdddddd);
			m.vertexColors = THREE.FaceColors;
		}

		let cat_mesh = new THREE.SkinnedMesh(geometry, materials[0]);
		cat_mesh.position.set(x, y, z);
		cat_mesh.scale.set(s, s, s);
		cat_mesh.castShadow = true;
		cat_mesh.receiveShadow = true;
		scene.add(cat_mesh);

		let clipBones = geometry.animations[0];
		let boneAction = new THREE.AnimationAction(clipBones);
		boneAction.loop = THREE.LoopOnce;
		boneAction.loopCount = 1;
		boneAction.actionTime = 2;
		mixer = new THREE.AnimationMixer(cat_mesh);
		mixer.addAction(boneAction);
		mixers.push(mixer);
	}
	display() {
		this.ms_Water.render();
		this.ms_Renderer.render(this.ms_Scene, this.ms_Camera);
	}
	initialZoom() {
		let fov = this.ms_Camera.fov;
		let zoom = this.ms_Camera.zoom;
		const inc = 0.01;
		if (zoom < 1.5) {
			this.ms_Camera.zoom += inc;
			this.ms_Camera.updateProjectionMatrix();
		} else {
			ready = false;
		}
	}
	update() {
		const inParameters = this.ms_Parameters;
		this.ms_Water.material.uniforms.time.value += 1.0 / 60.0;

		if (reducing) {
			this.ms_Terrain.position.y -= 20;
			this.ms_Terrain.callback();
		}
		if (this.ms_Terrain.position.y < -inParameters.depth * 0.5 && !reducing) {
			this.ms_Terrain.position.y += 20;
		}
		let delta = clock.getDelta();
		let elapsedTime = clock.getElapsedTime();

		if (this.ms_particleSystem) {
			this.ms_particleSystem.material.uniforms.elapsedTime.value = elapsedTime * 10;
		}

		if (mixers.length) {
			for (var i = 0; i < mixers.length; i++) {
				mixers[i].update(delta);
			}
		}
		if (ready) this.initialZoom();
		this.ms_Controls.update();
		this.display();
	}
	handleButton() {
		pushed = true;
		for (var i = 0; i < mixers.length; i++) {
			for (var y = 0; y < mixers[i].actions.length; y++) {
				mixers[i].actions[y].enabled = true;
				mixers[i].actions[y].loopCount = 0;
				mixers[i].actions[y].loop = THREE.LoopOnce;
				mixers[i].actions[y].actionTime = 0;
			}
		}
	}
	handleKeyDown() {
		document.addEventListener('keydown', e => {
			switch (e.keyCode) {
				case 69:
					this.ms_Terrain.callback();
					break;
				case 87:
				case 81:
					this.handleButton();
					break;
				default:
					break;
			}
		});
	}
	resize(inWidth, inHeight) {
		this.ms_Camera.aspect = inWidth / inHeight;
		this.ms_Camera.updateProjectionMatrix();
		this.ms_Renderer.setSize(inWidth, inHeight);
		this.ms_Canvas.html(this.ms_Renderer.domElement);
		this.display();
	}
};

const DEMO = new Demo();

function mainLoop() {
	requestAnimationFrame(mainLoop);
	DEMO.update();
}

function onDocumentMouseDown(event) {
	event.preventDefault();
	var mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);

	DEMO.ms_Raycaster.setFromCamera(mouse, DEMO.ms_Camera);
	var intersects = DEMO.ms_Raycaster.intersectObjects(DEMO.ms_Clickable);

	if (intersects.length > 0) {
		intersects[0].object.callback();
	}
}

$(function () {
	WINDOW.initialize();

	document.addEventListener('click', onDocumentMouseDown, false);

	var parameters = {
		alea: RAND_MT,
		generator: PN_GENERATOR,
		width: 20000,
		height: 14000,
		widthSegments: 120,
		heightSegments: 120,
		depth: 3000,
		param: 9.2,
		filterparam: .1,
		filter: [CIRCLE_FILTER],
		postgen: [MOUNTAINS_COLORS],
		effect: [DESTRUCTURE_EFFECT]
	};

	DEMO.initialize('canvas-3d', parameters);

	WINDOW.resizeCallback = function (inWidth, inHeight) {
		DEMO.resize(inWidth, inHeight);
	};
	DEMO.resize(WINDOW.ms_Width, WINDOW.ms_Height);

	mainLoop();

	//CSS animations

	const welcome = document.getElementsByClassName('welcome-screen')[0];
	welcome.addEventListener('click', e => {
		welcome.className += ' fade-out';
		setTimeout(() => {
			welcome.parentNode.removeChild(welcome);
		}, 350);
	});
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxTQUFTO0lBQUUsT0FBTyxHQUFHLEVBQUU7SUFBRSxNQUFNLEdBQUcsRUFBRTtJQUFFLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDekQsSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDOUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNyQixJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDOztBQUluQixNQUFNLElBQUksQ0FBQztBQUNWLFlBQVcsR0FBRztBQUNiLE1BQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLE1BQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFCLE1BQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7RUFDOUI7QUFDRCxPQUFNLEdBQUc7QUFDRixNQUFJO0FBQ0EsT0FBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztB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TSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pDLFdBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0QsV0FBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzRCxXQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQzlEOztBQUVELE9BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRyxFQUFHO0FBQzdDLE9BQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQixJQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztBQUNsQixJQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDOUIsSUFBQyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDbEIsSUFBQyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUM7QUFDbkIsSUFBQyxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUM7QUFDdEMsSUFBQyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0dBQ2xDOztBQUVELE1BQUksUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFD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QUFTLENBQUMsQ0FBQzs7QUFFL0MsU0FBUSxFQUFFOzs7O0FBQUMsQUFJWCxPQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyRSxRQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSTtBQUN0QyxTQUFPLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQztBQUNqQyxZQUFVLENBQUMsTUFBSTtBQUNkLFVBQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ3hDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDUixDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBhbmltYXRpb24sIGhlbHBlcnMgPSBbXSwgbWl4ZXJzID0gW10sIHB1c2hlZCA9IGZhbHNlO1xubGV0IGNsb2NrID0gbmV3IFRIUkVFLkNsb2NrKCk7XG5sZXQgcmVhZHkgPSBmYWxzZTtcbmxldCByZWR1Y2luZyA9IGZhbHNlO1xubGV0IGlzRnJhbWVTdGVwcGluZyA9IGZhbHNlO1xubGV0IHRpbWVUb1N0ZXAgPSAwO1xuXG5cblxuY2xhc3MgRGVtbyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMubXNfQ2FudmFzID0gbnVsbDtcblx0XHR0aGlzLm1zX1JlbmRlcmVyID0gbnVsbDtcblx0XHR0aGlzLm1zX0NhbWVyYSA9IG51bGw7XG5cdFx0dGhpcy5tc19TY2VuZSA9IG51bGw7XG5cdFx0dGhpcy5tc19Db250cm9scyA9IG51bGw7XG5cdFx0dGhpcy5tc19XYXRlciA9IG51bGw7XG5cdFx0dGhpcy5tc19UZXJyYWluID0gbnVsbDtcblx0XHR0aGlzLm1zX1JheWNhc3RlciA9IG51bGw7XG5cdFx0dGhpcy5tc19DbGlja2FibGUgPSBbXTtcblx0XHR0aGlzLm1zX1BhcmFtZXRlcnMgPSBudWxsO1xuXHRcdHRoaXMubXNfcGFydGljbGVTeXN0ZW0gPSBudWxsO1xuXHR9XG5cdGVuYWJsZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBhQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICByZXR1cm4gISEgd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCAmJiAoYUNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGFDYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gIH1cblx0aW5pdGlhbGl6ZShpbklkQ2FudmFzLCBpblBhcmFtZXRlcnMpIHtcblx0XHR0aGlzLm1zX0NhbnZhcyA9ICQoJyMnK2luSWRDYW52YXMpO1xuXHRcdHRoaXMubXNfUGFyYW1ldGVycyA9IGluUGFyYW1ldGVycztcblx0XHQvLyBJbml0aWFsaXplIFJlbmRlcmVyLCBDYW1lcmEsIFByb2plY3RvciBhbmQgU2NlbmVcblx0XHR0aGlzLm1zX1JlbmRlcmVyID0gdGhpcy5lbmFibGUgPyBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KSA6IG5ldyBUSFJFRS5DYW52YXNSZW5kZXJlcigpO1xuXHRcdHRoaXMubXNfQ2FudmFzLmh0bWwodGhpcy5tc19SZW5kZXJlci5kb21FbGVtZW50KTtcblx0XHR0aGlzLm1zX1NjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cdFx0dGhpcy5tc19DYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNTUuMCwgV0lORE9XLm1zX1dpZHRoIC8gV0lORE9XLm1zX0hlaWdodCwgMC41LCAzMDAwMDAwKTtcblx0XHR0aGlzLm1zX0NhbWVyYS5wb3NpdGlvbi5zZXQoMCwgLU1hdGgubWF4KGluUGFyYW1ldGVycy53aWR0aCAqIDEuNSwgaW5QYXJhbWV0ZXJzLmhlaWdodCkgLyA4LCBpblBhcmFtZXRlcnMuaGVpZ2h0KTtcblx0XHR0aGlzLm1zX0NhbWVyYS5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCkpO1xuXG5cdFx0dGhpcy5tc19SYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG5cdFx0XG5cdFx0Ly8gSW5pdGlhbGl6ZSBPcmJpdCBjb250cm9sXHRcdFxuXHRcdHRoaXMubXNfQ29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyh0aGlzLm1zX0NhbWVyYSwgdGhpcy5tc19SZW5kZXJlci5kb21FbGVtZW50KTtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLnVzZXJQYW4gPSBmYWxzZTtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLnVzZXJQYW5TcGVlZCA9IDAuMDtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLm1heERpc3RhbmNlID0gNDAwMC4wO1xuXHRcdHRoaXMubXNfQ29udHJvbHMuZW5hYmxlS2V5cyA9IGZhbHNlO1xuXHRcdHRoaXMubXNfQ29udHJvbHMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEkgKiAuNDk1O1xuXHRcdHRoaXMubXNfQ29udHJvbHMubWF4QXppbXV0aEFuZ2xlID0gMTtcblx0XHR0aGlzLm1zX0NvbnRyb2xzLm1pbkF6aW11dGhBbmdsZSA9IC0xO1xuXHRcblx0XHQvLyBBZGQgbGlnaHRcblxuXHRcdHZhciBhbWJpZW50ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCggMHg4ODg4ODgpO1xuXHRcdHRoaXMubXNfU2NlbmUuYWRkKGFtYmllbnQpO1xuXHRcdC8vTGVmdCBMaWdodFxuXHRcdHZhciBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHg4ODg4ODgsIC45KTtcblx0XHRkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLnNldCgtNjAwLCAzMDAsIDYwMCk7XG5cdFx0dGhpcy5tc19TY2VuZS5hZGQoZGlyZWN0aW9uYWxMaWdodCk7XG5cdFx0Ly9SaWdodCBsaWdodFxuXHRcdHZhciBkaXJlY3Rpb25hbExpZ2h0MiA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ODg4ODg4LCAuOCk7XG5cdFx0ZGlyZWN0aW9uYWxMaWdodDIucG9zaXRpb24uc2V0KDYwMCwgODAwLCA2MDApO1xuXHRcdHRoaXMubXNfU2NlbmUuYWRkKGRpcmVjdGlvbmFsTGlnaHQyKTtcblx0XHQvL0JvdHRvbSBMaWdodFxuXHRcdHZhciBkaXJlY3Rpb25hbExpZ2h0MyA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ODg4ODg4LCAuMTUpO1xuXHRcdGRpcmVjdGlvbmFsTGlnaHQzLnBvc2l0aW9uLnNldCgwLCAwLCAxMDAwKTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0Myk7XG5cdFx0Ly9CYWNrIExpZ2h0XG5cdFx0dmFyIGRpcmVjdGlvbmFsTGlnaHQ0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHg3N0QwRkYsIC41KTtcblx0XHRkaXJlY3Rpb25hbExpZ2h0NC5wb3NpdGlvbi5zZXQoMCwgNjAwLCAtNjAwKTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0NCk7XG5cdFx0XG5cdFx0Ly8gQ3JlYXRlIHRlcnJhaW5cblx0XHR0aGlzLmxvYWRUZXJyYWluKGluUGFyYW1ldGVycyk7XG5cdFx0XG5cdFx0Ly8gTG9hZCB0ZXh0dXJlc1x0XHRcblx0XHR2YXIgd2F0ZXJOb3JtYWxzID0gbmV3IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJy4uL2Fzc2V0cy9pbWcvd2F0ZXJub3JtYWxzLmpwZycpO1xuXHRcdHdhdGVyTm9ybWFscy53cmFwUyA9IHdhdGVyTm9ybWFscy53cmFwVCA9IFRIUkVFLlNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nOyBcblx0XHRcblx0XHQvLyBDcmVhdGUgdGhlIHdhdGVyIGVmZmVjdFxuXHRcdHRoaXMubXNfV2F0ZXIgPSBuZXcgVEhSRUUuV2F0ZXIodGhpcy5tc19SZW5kZXJlciwgdGhpcy5tc19DYW1lcmEsIHRoaXMubXNfU2NlbmUsIHtcblx0XHRcdHRleHR1cmVXaWR0aDogNTEyLCBcblx0XHRcdHRleHR1cmVIZWlnaHQ6IDUxMixcblx0XHRcdHdhdGVyTm9ybWFsczogd2F0ZXJOb3JtYWxzLFxuXHRcdFx0YWxwaGE6IFx0MS4wLFxuXHRcdFx0c3VuRGlyZWN0aW9uOiBkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLm5vcm1hbGl6ZSgpLFxuXHRcdFx0c3VuQ29sb3I6IDB4RkZGRkZGLFxuXHRcdFx0d2F0ZXJDb2xvcjogMHg4RjgxQTEsXG5cdFx0XHRkaXN0b3J0aW9uU2NhbGU6IDIwLjBcblx0XHR9KTtcblx0XHR2YXIgYU1lc2hNaXJyb3IgPSBuZXcgVEhSRUUuTWVzaChcblx0XHRcdG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KGluUGFyYW1ldGVycy53aWR0aCAqIDUwMCwgaW5QYXJhbWV0ZXJzLmhlaWdodCAqIDUwMCwgMTAsIDEwKSwgXG5cdFx0XHR0aGlzLm1zX1dhdGVyLm1hdGVyaWFsXG5cdFx0KTtcblx0XHRhTWVzaE1pcnJvci5hZGQodGhpcy5tc19XYXRlcik7XG5cdFx0YU1lc2hNaXJyb3Iucm90YXRpb24ueCA9IC0gTWF0aC5QSSAqIDAuNTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChhTWVzaE1pcnJvcik7XG5cdFxuXHRcdC8vTG9hZCBvYmplY3RzXHRcblx0XHR0aGlzLmxvYWRTa3lCb3goKTtcblx0XHR0aGlzLmxvYWRHbGFjaWVycygpO1xuXHRcdHRoaXMubG9hZEljZSgpO1xuXHRcdHRoaXMubG9hZENhdCgpO1xuXHRcdC8vIHRoaXMubG9hZFNub3coaW5QYXJhbWV0ZXJzKTtcblxuXHRcdC8vTGlzdGVuIGZvciB0cmlnZ2VyXG5cdFx0Y29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3RyaWdnZXInKTtcblx0XHRbXS5zbGljZS5jYWxsKGJ1dHRvbnMpLmZvckVhY2goIGJ1dHRvbiA9PiB7XG5cdFx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG5cdFx0XHRcdHRoaXMuaGFuZGxlQnV0dG9uKCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHR0aGlzLmhhbmRsZUtleURvd24oKTtcblxuXHRcdC8vQXVkaW9cblx0XHR2YXIgYXVkaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuXHQgIHZhciBzb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcblx0ICBzb3VyY2Uuc3JjID0gJ2Fzc2V0cy9zb3VuZHMvc2xlZXAubXAzJztcblx0ICBhdWRpby5sb29wID0gdHJ1ZTtcblx0ICBhdWRpby5hcHBlbmRDaGlsZChzb3VyY2UpO1xuXHQgIC8vIGF1ZGlvLnBsYXkoKTtcblxuXHQgIC8vYWxsb3cgem9vbVxuXHQgIHNldFRpbWVvdXQoKCk9Pntcblx0ICBcdHJlYWR5ID0gdHJ1ZTtcblx0ICB9LCAxMDAwMCk7XG5cdH1cblx0bG9hZFNreUJveCgpIHtcblx0XHR2YXIgc2t5VGV4dHVyZSA9IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJ2Fzc2V0cy9pbWcvZ3JhZGllbnRfMDMuanBnJyk7XG5cdFx0Ly8gc2t5VGV4dHVyZS53cmFwUyA9IHNreVRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcblxuXHRcdC8vIHZhciBhU2t5Qm94TWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuXHRcdC8vICAgZnJhZ21lbnRTaGFkZXI6IGFTaGFkZXIuZnJhZ21lbnRTaGFkZXIsXG5cdFx0Ly8gICB2ZXJ0ZXhTaGFkZXI6IGFTaGFkZXIudmVydGV4U2hhZGVyLFxuXHRcdC8vICAgdW5pZm9ybXM6IGFTaGFkZXIudW5pZm9ybXMsXG5cdFx0Ly8gICBkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHQvLyAgIHNpZGU6IFRIUkVFLkJhY2tTaWRlXG5cdFx0Ly8gfSk7XG5cblx0XHR2YXIgYVNreWJveCA9IG5ldyBUSFJFRS5NZXNoKFxuXHRcdCAgbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEwMDAwLCAzMiwgMzIpLFxuXHRcdCAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcblx0XHQgIFx0XHRtYXA6IHNreVRleHR1cmUsXG5cdFx0XHRcdFx0c2lkZTogVEhSRUUuQmFja1NpZGUsXG5cdFx0XHRcdFx0dmVydGV4Q29sb3JzOiBUSFJFRS5GYWNlQ29sb3JzLFxuXHRcdFx0XHRcdHNoYWRpbmc6IFRIUkVFLlNtb290aFNoYWRpbmcsXG5cdFx0XHRcdH0pXG5cdFx0KTtcblx0XHRcblx0XHR0aGlzLm1zX1NjZW5lLmFkZChhU2t5Ym94KTtcblx0fVxuXHRsb2FkVGVycmFpbihpblBhcmFtZXRlcnMpIHtcblx0XHR2YXIgdGVycmFpbkdlbyA9IFRFUlJBSU5HRU4uR2V0KGluUGFyYW1ldGVycyk7XG5cdFx0dmFyIGljZVRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCdhc3NldHMvaW1nL3RleHR1cmVfMDAxLmpwZycpO1xuXHRcdHZhciB0ZXJyYWluTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBtYXA6IGljZVRleHR1cmUsIHNoYWRpbmc6IFRIUkVFLkZsYXRTaGFkaW5nLCBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlIH0pO1xuXHRcdHRlcnJhaW5NYXRlcmlhbC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvciggMHhDQ0NDRUUgKTtcblx0XHR0aGlzLm1zX1RlcnJhaW4gPSBuZXcgVEhSRUUuTWVzaCh0ZXJyYWluR2VvLCB0ZXJyYWluTWF0ZXJpYWwpO1xuXHRcdHRoaXMubXNfVGVycmFpbi5wb3NpdGlvbi55ID0gLSBpblBhcmFtZXRlcnMuZGVwdGg7XG5cdFx0dGhpcy5tc19UZXJyYWluLnBvc2l0aW9uLnogPSAtNDAwMDtcblx0XHR0aGlzLm1zX1RlcnJhaW4uY2FsbGJhY2sgPSAoKSA9PiB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLm1zX1RlcnJhaW4ucG9zaXRpb24ueSk7XG5cdFx0XHRpZiAodGhpcy5tc19UZXJyYWluLnBvc2l0aW9uLnkgPD0gLWluUGFyYW1ldGVycy5kZXB0aCkge1xuXHRcdFx0XHRyZWR1Y2luZyA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLm1zX1NjZW5lLnJlbW92ZSh0aGlzLm1zX1RlcnJhaW4pO1xuXHRcdFx0XHR0aGlzLmxvYWRUZXJyYWluKGluUGFyYW1ldGVycyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZWR1Y2luZyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIHRoaXMubXNfQ2xpY2thYmxlLnB1c2godGhpcy5tc19UZXJyYWluKTtcblx0XHR0aGlzLm1zX1NjZW5lLmFkZCh0aGlzLm1zX1RlcnJhaW4pO1xuXHR9XG5cdGxvYWRHbGFjaWVycygpIHtcblx0XHR2YXIgb2JqTG9hZGVyID0gbmV3IFRIUkVFLk9CSkxvYWRlcigpO1xuXHRcdHZhciBtc19TY2VuZSA9IHRoaXMubXNfU2NlbmU7XG5cdFx0dmFyIGljZVRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCdhc3NldHMvaW1nL3RleHR1cmVfMDAxLmpwZycpO1xuXHRcdG9iakxvYWRlci5sb2FkKCdhc3NldHMvbGFuZHNjYXBlX2Fzc2V0cy9nbGFjaWVyXzAxLm9iaicsIGZ1bmN0aW9uKGdsYWNpZXIpIHtcblxuXHRcdFx0XHQvL2xvYWQgaWNlIHRleHR1cmVcblx0XHRcdFx0Zm9yICh2YXIgaT0wOyBpPGdsYWNpZXIuY2hpbGRyZW4ubGVuZ3RoO2krKyApe1xuXHRcdFx0XHRcdGdsYWNpZXIuY2hpbGRyZW5baV0ubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuXHRcdFx0ICBcdFx0bWFwOiBpY2VUZXh0dXJlLFxuXHRcdFx0ICBcdFx0c3BlY3VsYXJNYXA6IGljZVRleHR1cmUsXG5cdFx0XHRcdFx0XHRzaGFkaW5nOiBUSFJFRS5TbW9vdGhTaGFkaW5nLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHBoeXNpY3NfZ2xhY2llciA9IG5ldyBQaHlzaWpzLkJveE1lc2goZ2xhY2llci5nZW9tZXRyeSwgKTtcblx0XHRcdFx0Z2xhY2llci5wb3NpdGlvbi56ID0gMTAwMDtcblx0XHRcdFx0Z2xhY2llci5wb3NpdGlvbi54ID0gMjAwO1xuXHRcdFx0XHRnbGFjaWVyLnNjYWxlLnNldCguMSwuMSwuMSk7XG5cdFx0XHRcdG1zX1NjZW5lLmFkZChnbGFjaWVyKTtcblx0XHR9KTtcblx0XHRvYmpMb2FkZXIubG9hZCgnYXNzZXRzL2xhbmRzY2FwZV9hc3NldHMvZ2xhY2llcl8wMi5vYmonLCBmdW5jdGlvbihnbGFjaWVyKSB7XG5cblx0XHRcdFx0Ly9sb2FkIGljZSB0ZXh0dXJlXG5cdFx0XHRcdGZvciAodmFyIGk9MDsgaTxnbGFjaWVyLmNoaWxkcmVuLmxlbmd0aDtpKysgKXtcblx0XHRcdFx0XHRnbGFjaWVyLmNoaWxkcmVuW2ldLm1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcblx0XHRcdCAgXHRcdG1hcDogaWNlVGV4dHVyZSxcblx0XHRcdCAgXHRcdHNwZWN1bGFyTWFwOiBpY2VUZXh0dXJlLFxuXHRcdFx0XHRcdFx0c2hhZGluZzogVEhSRUUuU21vb3RoU2hhZGluZyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdsYWNpZXIucG9zaXRpb24ueiA9IDkwMDtcblx0XHRcdFx0Z2xhY2llci5wb3NpdGlvbi54ID0gLTEwMDA7XG5cdFx0XHRcdGdsYWNpZXIuc2NhbGUuc2V0KC4yLC4yLC4yKTtcblx0XHRcdFx0bXNfU2NlbmUuYWRkKGdsYWNpZXIpO1xuXHRcdH0pO1xuXHR9XG5cdGxvYWRJY2UoKSB7XG5cdFx0Y29uc3Qgb2JqTG9hZGVyID0gbmV3IFRIUkVFLk9CSkxvYWRlcigpO1xuXHRcdGNvbnN0IG1zX1NjZW5lID0gdGhpcy5tc19TY2VuZTtcblx0XHRjb25zdCBpY2VUZXh0dXJlID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSgnYXNzZXRzL2ltZy90ZXh0dXJlXzAwMS5qcGcnKTtcblx0XHRmb3IgKHZhciB4ID0gMzsgeCA+IDA7IHgtLSkge1xuXHRcdFx0b2JqTG9hZGVyLmxvYWQoYGFzc2V0cy9sYW5kc2NhcGVfYXNzZXRzL2Zsb2VfMCR7eH0ub2JqYCwgZ2xhY2llciA9PiB7XG5cdFx0XHRcdFx0Ly9sb2FkIGljZSB0ZXh0dXJlXG5cdFx0XHRcdFx0Zm9yICh2YXIgaT0wOyBpPGdsYWNpZXIuY2hpbGRyZW4ubGVuZ3RoO2krKyApe1xuXHRcdFx0XHRcdFx0Z2xhY2llci5jaGlsZHJlbltpXS5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG5cdFx0XHRcdCAgXHRcdG1hcDogaWNlVGV4dHVyZSxcblx0XHRcdFx0ICBcdFx0c3BlY3VsYXJNYXA6IGljZVRleHR1cmUsXG5cdFx0XHRcdFx0XHRcdHNoYWRpbmc6IFRIUkVFLlNtb290aFNoYWRpbmcsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Z2xhY2llci5wb3NpdGlvbi56ID0gMTAwMDtcblx0XHRcdFx0XHRnbGFjaWVyLnBvc2l0aW9uLnggPSAwO1xuXHRcdFx0XHRcdGdsYWNpZXIucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cdFx0XHRcdFx0Z2xhY2llci5zY2FsZS5zZXQoMSw4LDEpO1xuXHRcdFx0XHRcdGZvciAobGV0IHkgPSAwOyB5IDwgNDsgeSsrKXtcblx0XHRcdFx0XHRcdGxldCBnbGFjaWVyQ29weSA9IGdsYWNpZXIuY2xvbmUoKTtcblx0XHRcdFx0XHRcdGdsYWNpZXJDb3B5LnBvc2l0aW9uLnogPSA1MDAveSAqIE1hdGgucmFuZG9tKCk7XG5cdFx0XHRcdFx0XHRnbGFjaWVyQ29weS5wb3NpdGlvbi54ID0gMjAwICogeSoqeCAqIE1hdGgucmFuZG9tKCk7XG5cdFx0XHRcdFx0XHRtc19TY2VuZS5hZGQoZ2xhY2llckNvcHkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtc19TY2VuZS5hZGQoZ2xhY2llcik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0bG9hZFNub3coaW5QYXJhbWV0ZXJzKSB7XG5cdFx0Y29uc3QgcmFuZCA9IHYgPT4ge1xuXHRcdFx0cmV0dXJuICh2ICogKE1hdGgucmFuZG9tKCkgLSAwLjUpKTtcblx0XHR9XG5cdFx0Y29uc3QgdGV4dHVyZSA9IFRIUkVFLlRleHR1cmVMb2FkZXIoJ2Fzc2V0cy9pbWcvc25vd2ZsYWtlLnBuZycpO1xuXHRcdGxldCBudW1QYXJ0aWNsZXMgPSAxMDAwMDA7XG5cdFx0bGV0IHdpZHRoID0gaW5QYXJhbWV0ZXJzLndpZHRoO1xuXHRcdGxldCBoZWlnaHQgPSBpblBhcmFtZXRlcnMuaGVpZ2h0LzM7XG5cdFx0bGV0IGRlcHRoID0gMTAwMDA7XG5cdFx0bGV0IHBhcmFtZXRlcnMgPSB7XG5cdFx0XHRcdGNvbG9yOiAweEZGRkZGRixcblx0XHRcdFx0aGVpZ2h0OiA4MDAwMCxcblx0XHRcdFx0cmFkaXVzWDogMTAsXG5cdFx0XHRcdHJhZGl1c1o6IDEwLFxuXHRcdFx0XHRzaXplOiAxMDAsXG5cdFx0XHRcdHNjYWxlOiAxLjAsXG5cdFx0XHRcdG9wYWNpdHk6IDAuOCxcblx0XHRcdFx0c3BlZWRIOiAuMSxcblx0XHRcdFx0c3BlZWRWOiAuMVxuXHRcdFx0fTtcblx0XHRcdGxldCBzeXN0ZW1HZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuXHRcdFx0bGV0IHN5c3RlbU1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcblx0XHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0XHRjb2xvcjogIHsgdHlwZTogJ2MnLCB2YWx1ZTogbmV3IFRIUkVFLkNvbG9yKCBwYXJhbWV0ZXJzLmNvbG9yICkgfSxcblx0XHRcdFx0XHRoZWlnaHQ6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5oZWlnaHQgfSxcblx0XHRcdFx0XHRlbGFwc2VkVGltZTogeyB0eXBlOiAnZicsIHZhbHVlOiAwIH0sXG5cdFx0XHRcdFx0cmFkaXVzWDogeyB0eXBlOiAnZicsIHZhbHVlOiBwYXJhbWV0ZXJzLnJhZGl1c1ggfSxcblx0XHRcdFx0XHRyYWRpdXNaOiB7IHR5cGU6ICdmJywgdmFsdWU6IHBhcmFtZXRlcnMucmFkaXVzWiB9LFxuXHRcdFx0XHRcdHNpemU6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5zaXplIH0sXG5cdFx0XHRcdFx0c2NhbGU6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5zY2FsZSB9LFxuXHRcdFx0XHRcdHRleHR1cmU6IHsgdHlwZTogJ3QnLCB2YWx1ZTogdGV4dHVyZSB9LFxuXHRcdFx0XHRcdG9wYWNpdHk6IHsgdHlwZTogJ2YnLCB2YWx1ZTogcGFyYW1ldGVycy5vcGFjaXR5IH0sXG5cdFx0XHRcdFx0c3BlZWRIOiB7IHR5cGU6ICdmJywgdmFsdWU6IHBhcmFtZXRlcnMuc3BlZWRIIH0sXG5cdFx0XHRcdFx0c3BlZWRWOiB7IHR5cGU6ICdmJywgdmFsdWU6IHBhcmFtZXRlcnMuc3BlZWRWIH1cblx0XHRcdFx0fSxcblx0XHRcdFx0dmVydGV4U2hhZGVyOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3N0ZXAwN192cycgKS50ZXh0Q29udGVudCxcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnc3RlcDA5X2ZzJyApLnRleHRDb250ZW50LFxuXHRcdFx0XHRibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyxcblx0XHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRcdGRlcHRoVGVzdDogZmFsc2Vcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0Zm9yKCB2YXIgaSA9IDA7IGkgPCBudW1QYXJ0aWNsZXM7IGkrKyApIHtcblx0XHRcdHZhciB2ZXJ0ZXggPSBuZXcgVEhSRUUuVmVjdG9yMyhcblx0XHRcdFx0XHRyYW5kKCB3aWR0aCApLFxuXHRcdFx0XHRcdE1hdGgucmFuZG9tKCkgKiBoZWlnaHQsXG5cdFx0XHRcdFx0cmFuZCggZGVwdGggKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRzeXN0ZW1HZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXggKTtcblx0XHR9XG5cblxuXHRcdHRoaXMubXNfcGFydGljbGVTeXN0ZW0gPSBuZXcgVEhSRUUuUG9pbnRzKCBzeXN0ZW1HZW9tZXRyeSwgc3lzdGVtTWF0ZXJpYWwgKTtcblx0XHR0aGlzLm1zX3BhcnRpY2xlU3lzdGVtLnBvc2l0aW9uLnkgPSAtaGVpZ2h0LzI7XG5cdFx0dGhpcy5tc19TY2VuZS5hZGQoIHRoaXMubXNfcGFydGljbGVTeXN0ZW0gKTtcblx0fVxuXHRsb2FkQ2F0KCkge1xuXHRcdGNvbnN0IGpzb25Mb2FkZXIgPSBuZXcgVEhSRUUuSlNPTkxvYWRlcigpO1xuXHRcdGpzb25Mb2FkZXIubG9hZCggXCJhc3NldHMvanMvY2F0X2FuaW1hdGVkLmpzXCIsICAoIGdlb21ldHJ5LCBtYXRlcmlhbHMgKSA9PiB7XG5cdFx0XHR0aGlzLmxvYWRBbmltYXRpb24oIGdlb21ldHJ5LCBtYXRlcmlhbHMsIDAsIDMwLCAxMDAwLCAxNSwgdGhpcy5tc19TY2VuZSwgXCJhc3NldHMvaW1nL2NhdF9kaWZmdXNlLmpwZ1wiICk7XG5cdFx0fSk7XG5cdFx0anNvbkxvYWRlci5sb2FkKCBcImFzc2V0cy9qcy9jYXRfYW5pbWF0ZWRfaGF0LmpzXCIsICAoIGdlb21ldHJ5LCBtYXRlcmlhbHMgKSAgPT4ge1xuXHRcdFx0dGhpcy5sb2FkQW5pbWF0aW9uKCBnZW9tZXRyeSwgbWF0ZXJpYWxzLCAwLCAzMCwgMTAwMCwgMTUsIHRoaXMubXNfU2NlbmUsIFwiYXNzZXRzL2ltZy9oYXRfZGlmZnVzZS5qcGdcIiApO1xuXHRcdH0pO1xuXHR9XG5cdGxvYWRBbmltYXRpb24oIGdlb21ldHJ5LCBtYXRlcmlhbHMsIHgsIHksIHosIHMsIHNjZW5lLCB0ZXh0dXJlICkge1xuXHRcdGxldCBtaXhlcjtcblx0XHRjb25zdCBvYmpUZXh0dXJlID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSh0ZXh0dXJlKTtcblx0XHQvLyBnZW9tZXRyeS5jb21wdXRlRmFjZU5vcm1hbHMoKTtcbiAgXHQvLyBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICBcdGdlb21ldHJ5LmR5bmFtaWMgPSB0cnVlXG5cdFx0Z2VvbWV0cnkuX19kaXJ0eVZlcnRpY2VzID0gdHJ1ZTtcblx0XHRnZW9tZXRyeS5fX2RpcnR5Tm9ybWFscyA9IHRydWU7XG5cblx0XHQvL0ZsaXAgbm9ybWFsc1xuXHRcdGZvcih2YXIgaSA9IDA7IGk8Z2VvbWV0cnkuZmFjZXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgZ2VvbWV0cnkuZmFjZXNbaV0ubm9ybWFsLnggPSAtMSpnZW9tZXRyeS5mYWNlc1tpXS5ub3JtYWwueDtcblx0XHQgICAgZ2VvbWV0cnkuZmFjZXNbaV0ubm9ybWFsLnkgPSAtMSpnZW9tZXRyeS5mYWNlc1tpXS5ub3JtYWwueTtcblx0XHQgICAgZ2VvbWV0cnkuZmFjZXNbaV0ubm9ybWFsLnogPSAtMSpnZW9tZXRyeS5mYWNlc1tpXS5ub3JtYWwuejtcblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtYXRlcmlhbHMubGVuZ3RoOyBpICsrICkge1xuXHRcdFx0bGV0IG0gPSBtYXRlcmlhbHNbaV07XG5cdFx0XHRtLnNraW5uaW5nID0gdHJ1ZTtcblx0XHRcdG0uc2hhZGluZyA9IFRIUkVFLkZsYXRTaGFkaW5nO1xuXHRcdFx0bS5zaGluaW5lc3MgPSAxMDA7XG5cdFx0XHRtLm1hcCA9IG9ialRleHR1cmU7XG5cdFx0XHRtLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCAweGRkZGRkZCApO1xuXHRcdFx0bS52ZXJ0ZXhDb2xvcnMgPSBUSFJFRS5GYWNlQ29sb3JzO1xuXHRcdH1cblx0XHRcblx0XHRsZXQgY2F0X21lc2ggPSBuZXcgVEhSRUUuU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbHNbMF0pO1xuXHRcdGNhdF9tZXNoLnBvc2l0aW9uLnNldCggeCwgeSwgeiApO1xuXHRcdGNhdF9tZXNoLnNjYWxlLnNldCggcywgcywgcyApO1xuXHRcdGNhdF9tZXNoLmNhc3RTaGFkb3cgPSB0cnVlO1xuXHRcdGNhdF9tZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXHRcdHNjZW5lLmFkZCggY2F0X21lc2ggKTtcblxuXHRcdGxldCBjbGlwQm9uZXMgPSBnZW9tZXRyeS5hbmltYXRpb25zWzBdO1xuXHRcdGxldCBib25lQWN0aW9uID0gbmV3IFRIUkVFLkFuaW1hdGlvbkFjdGlvbiggY2xpcEJvbmVzICk7XG5cdFx0Ym9uZUFjdGlvbi5sb29wID0gVEhSRUUuTG9vcE9uY2U7XG5cdFx0Ym9uZUFjdGlvbi5sb29wQ291bnQgPSAxO1xuXHRcdGJvbmVBY3Rpb24uYWN0aW9uVGltZSA9IDI7XG5cdFx0bWl4ZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTWl4ZXIoIGNhdF9tZXNoICk7XG5cdFx0bWl4ZXIuYWRkQWN0aW9uKCBib25lQWN0aW9uICk7XG5cdFx0bWl4ZXJzLnB1c2gobWl4ZXIpO1xuXHR9XG5cdGRpc3BsYXkoKSB7XG5cdFx0dGhpcy5tc19XYXRlci5yZW5kZXIoKTtcblx0XHR0aGlzLm1zX1JlbmRlcmVyLnJlbmRlcih0aGlzLm1zX1NjZW5lLCB0aGlzLm1zX0NhbWVyYSk7XG5cdH1cblx0aW5pdGlhbFpvb20oKSB7XG5cdFx0bGV0IGZvdiA9IHRoaXMubXNfQ2FtZXJhLmZvdjtcblx0XHRsZXQgem9vbSA9IHRoaXMubXNfQ2FtZXJhLnpvb207XG5cdFx0Y29uc3QgaW5jID0gMC4wMTtcblx0XHRpZiAoem9vbSA8IDEuNSkge1xuXHRcdFx0dGhpcy5tc19DYW1lcmEuem9vbSArPSBpbmM7XG5cdCAgICB0aGlzLm1zX0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlYWR5ID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHVwZGF0ZSgpIHtcblx0XHRjb25zdCBpblBhcmFtZXRlcnMgPSB0aGlzLm1zX1BhcmFtZXRlcnM7XG5cdFx0dGhpcy5tc19XYXRlci5tYXRlcmlhbC51bmlmb3Jtcy50aW1lLnZhbHVlICs9IDEuMCAvIDYwLjA7XG5cblx0XHRpZiAocmVkdWNpbmcpIHtcblx0XHRcdHRoaXMubXNfVGVycmFpbi5wb3NpdGlvbi55IC09IDIwO1xuXHRcdFx0dGhpcy5tc19UZXJyYWluLmNhbGxiYWNrKCk7XG5cdFx0fVxuXHRcdGlmICgodGhpcy5tc19UZXJyYWluLnBvc2l0aW9uLnkgPCAtaW5QYXJhbWV0ZXJzLmRlcHRoICogMC41KSAmJiAhcmVkdWNpbmcpIHtcblx0XHRcdHRoaXMubXNfVGVycmFpbi5wb3NpdGlvbi55ICs9IDIwO1xuXHRcdH1cblx0XHRsZXQgZGVsdGEgPSBjbG9jay5nZXREZWx0YSgpO1xuXHRcdGxldCBlbGFwc2VkVGltZSA9IGNsb2NrLmdldEVsYXBzZWRUaW1lKCk7XG5cblx0XHRpZih0aGlzLm1zX3BhcnRpY2xlU3lzdGVtKSB7XG5cdFx0XHR0aGlzLm1zX3BhcnRpY2xlU3lzdGVtLm1hdGVyaWFsLnVuaWZvcm1zLmVsYXBzZWRUaW1lLnZhbHVlID0gZWxhcHNlZFRpbWUgKiAxMDtcblx0XHR9XG5cblx0XHRpZiggbWl4ZXJzLmxlbmd0aCApIHtcblx0XHRcdGZvciAodmFyIGk9MDsgaTxtaXhlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bWl4ZXJzW2ldLnVwZGF0ZShkZWx0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChyZWFkeSkgdGhpcy5pbml0aWFsWm9vbSgpO1xuXHRcdHRoaXMubXNfQ29udHJvbHMudXBkYXRlKCk7XG5cdFx0dGhpcy5kaXNwbGF5KCk7XG5cdH1cblx0aGFuZGxlQnV0dG9uKCkge1xuXHRcdHB1c2hlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaT0wOyBpPG1peGVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Zm9yICh2YXIgeT0wO3k8bWl4ZXJzW2ldLmFjdGlvbnMubGVuZ3RoO3krKykge1xuXHRcdFx0XHRtaXhlcnNbaV0uYWN0aW9uc1t5XS5lbmFibGVkID0gdHJ1ZTtcblx0XHRcdFx0bWl4ZXJzW2ldLmFjdGlvbnNbeV0ubG9vcENvdW50ID0gMDtcblx0XHRcdFx0bWl4ZXJzW2ldLmFjdGlvbnNbeV0ubG9vcCA9IFRIUkVFLkxvb3BPbmNlO1xuXHRcdFx0XHRtaXhlcnNbaV0uYWN0aW9uc1t5XS5hY3Rpb25UaW1lID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aGFuZGxlS2V5RG93bigpIHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG5cdFx0XHRzd2l0Y2ggKGUua2V5Q29kZSkge1xuXHRcdFx0XHRjYXNlIDY5OlxuXHRcdFx0XHRcdHRoaXMubXNfVGVycmFpbi5jYWxsYmFjaygpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDg3OlxuXHRcdFx0XHRjYXNlIDgxOlxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlQnV0dG9uKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cmVzaXplKGluV2lkdGgsIGluSGVpZ2h0KSB7XG5cdFx0dGhpcy5tc19DYW1lcmEuYXNwZWN0ID0gIGluV2lkdGggLyBpbkhlaWdodDtcblx0XHR0aGlzLm1zX0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0dGhpcy5tc19SZW5kZXJlci5zZXRTaXplKGluV2lkdGgsIGluSGVpZ2h0KTtcblx0XHR0aGlzLm1zX0NhbnZhcy5odG1sKHRoaXMubXNfUmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cdFx0dGhpcy5kaXNwbGF5KCk7XG5cdH1cbn07XG5cbmNvbnN0IERFTU8gPSBuZXcgRGVtbztcblxuZnVuY3Rpb24gbWFpbkxvb3AoKSB7XG5cdHJlcXVlc3RBbmltYXRpb25GcmFtZShtYWluTG9vcCk7XG5cdERFTU8udXBkYXRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZURvd24oZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBtb3VzZSA9IG5ldyBUSFJFRS5WZWN0b3IyKFxuICAgICAgICAoIGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDEsIFxuICAgICAgICAtICggZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCApICogMiArIDEgKTtcblxuICAgIERFTU8ubXNfUmF5Y2FzdGVyLnNldEZyb21DYW1lcmEoIG1vdXNlLCBERU1PLm1zX0NhbWVyYSApO1xuICAgIHZhciBpbnRlcnNlY3RzID0gREVNTy5tc19SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyggREVNTy5tc19DbGlja2FibGUgKTsgICAgXG5cbiAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGggPiAwKSB7ICBcbiAgICAgICAgaW50ZXJzZWN0c1swXS5vYmplY3QuY2FsbGJhY2soKTtcbiAgICB9ICAgICAgICAgICAgICAgIFxufVxuXG4kKGZ1bmN0aW9uKCkge1xuXHRXSU5ET1cuaW5pdGlhbGl6ZSgpO1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25Eb2N1bWVudE1vdXNlRG93biwgZmFsc2UpO1xuXHRcblx0dmFyIHBhcmFtZXRlcnMgPSB7XG5cdFx0YWxlYTogUkFORF9NVCxcblx0XHRnZW5lcmF0b3I6IFBOX0dFTkVSQVRPUixcblx0XHR3aWR0aDogMjAwMDAsXG5cdFx0aGVpZ2h0OiAxNDAwMCxcblx0XHR3aWR0aFNlZ21lbnRzOiAxMjAsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IDEyMCxcblx0XHRkZXB0aDogMzAwMCxcblx0XHRwYXJhbTogOS4yLFxuXHRcdGZpbHRlcnBhcmFtOiAuMSxcblx0XHRmaWx0ZXI6IFsgQ0lSQ0xFX0ZJTFRFUiBdLFxuXHRcdHBvc3RnZW46IFsgTU9VTlRBSU5TX0NPTE9SUyBdLFxuXHRcdGVmZmVjdDogWyBERVNUUlVDVFVSRV9FRkZFQ1QgXVxuXHR9O1xuXHRcblx0REVNTy5pbml0aWFsaXplKCdjYW52YXMtM2QnLCBwYXJhbWV0ZXJzKTtcblx0XG5cdFdJTkRPVy5yZXNpemVDYWxsYmFjayA9IGZ1bmN0aW9uKGluV2lkdGgsIGluSGVpZ2h0KSB7IERFTU8ucmVzaXplKGluV2lkdGgsIGluSGVpZ2h0KTsgfTtcblx0REVNTy5yZXNpemUoV0lORE9XLm1zX1dpZHRoLCBXSU5ET1cubXNfSGVpZ2h0KTtcblx0XG5cdG1haW5Mb29wKCk7XG5cblx0Ly9DU1MgYW5pbWF0aW9uc1xuXG5cdGNvbnN0IHdlbGNvbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd3ZWxjb21lLXNjcmVlbicpWzBdO1xuXHR3ZWxjb21lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG5cdFx0d2VsY29tZS5jbGFzc05hbWUgKz0gJyBmYWRlLW91dCc7XG5cdFx0c2V0VGltZW91dCgoKT0+e1xuXHRcdFx0d2VsY29tZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdlbGNvbWUpO1xuXHRcdH0sIDM1MCk7XG5cdH0pO1xufSk7Il19
